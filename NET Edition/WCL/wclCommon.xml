<?xml version="1.0"?>
<doc>
    <assembly>
        <name>wclCommon</name>
    </assembly>
    <members>
        <member name="T:wclCommon.Api.Win.CfgMgr">
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
        </member>
        <member name="T:wclCommon.Api.Win.Common">
            <exclude />
            <exclude />
            <exclude />
            <exclude />
        </member>
        <member name="T:wclCommon.Api.Win.Io">
            <exclude />
            <exclude />
            <exclude />
        </member>
        <member name="T:wclCommon.Api.Win.Memory">
            <exclude />
            <exclude />
        </member>
        <member name="T:wclCommon.Api.Win.Module">
            <exclude />
            <exclude />
        </member>
        <member name="T:wclCommon.Api.Win.Ole">
            <exclude />
            <exclude />
            <exclude />
            <exclude />
        </member>
        <member name="T:wclCommon.Api.Win.Registry">
            <exclude />
            <exclude />
        </member>
        <member name="T:wclCommon.Api.Win.Rt">
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
        </member>
        <member name="T:wclCommon.Api.Win.Security">
            <exclude />
            <exclude />
            <exclude />
        </member>
        <member name="T:wclCommon.Api.Win.Serial">
            <exclude />
            <exclude />
            <exclude />
        </member>
        <member name="T:wclCommon.Api.Win.Setup">
            <exclude />
            <exclude />
            <exclude />
        </member>
        <member name="T:wclCommon.Api.Win.Socket">
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
        </member>
        <member name="T:wclCommon.Api.Win.UsbDevice">
            <exclude />
        </member>
        <member name="T:wclCommon.Api.Win.User32">
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
        </member>
        <member name="T:wclCommon.Api.Win.Version">
            <exclude />
            <exclude />
        </member>
        <member name="T:wclCommon.wclErrors">
            <summary> The static class contains all the WCL error codes. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_SUCCESS">
            <summary> Operation completed with success. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_BASE">
            <summary> The base error code for the WCL system/common errors. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_INVALID_ARGUMENT">
            <summary> One or more arguments passed into the method or function are
              invalid. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_OUT_OF_MEMORY">
            <summary> Out of system memory. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_MR_BASE">
            <summary> The base error code for the message receiver. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_MR_CLOSED">
            <summary> A message receiver has already been closed or not
              opened. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_MR_OPENED">
            <summary> A message receiver has already been opened. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_MR_NOT_OPENED">
            <summary> A message receiver was not opened yet. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_MR_UNABLE_SYNCHRONIZE">
            <summary> A message receiver can not synchronize threads and notify
              a "main" thread about new received message. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_MR_UNABLE_REGISTER_SYNC_OBJ">
            <summary> A message receiver can not register for threads
              synchronization. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_MR_UNABLE_CREATE_SYNC_OBJ">
            <summary> A message receiver can not create a thread synchronization
              object. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_MR_SYNC_OBJ_NOT_CREATED">
            <summary> A thread synchronization object has not been created. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_MR_INVALID_THREAD">
            <summary> An invalid thread used to call the method. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_MR_UNABLE_CREATE_TERM_EVENT">
            <summary> Unable to create asynchronous message processing thread
              termination event. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_MR_INVALID_MESSAGE_PROCESSING_METHOD">
            <summary> Invalid or unsupported message processing method. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_MB_BASE">
            <summary> The base error code for the message broadcaster. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_MB_RECEIVER_ALREADY_SUBSCRIBED">
            <summary> A message receiver has already been subscribed. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_MB_RECEIVER_NOT_SUBSCRIBED">
            <summary> A message receiver has not been subscribed. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_MB_CAN_NOT_INIT_HW_THREAD">
            <summary> The message broadcaster can not initialize the hardware
              monitoring thread. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_MB_CAN_NOT_START_HW_THREAD">
            <summary> The message broadcaster can not start the hardware monitoring
              thread. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_MB_UNABLE_CREATE_HW_OBJ">
            <summary> The message broadcaster can not create the hardware monitoring
              object. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_MB_UNABLE_REGISTER_HW_NOTIFY">
            <summary> The message broadcaster can not register for hardware changes
              notifications. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_MB_UNABLE_CREATE_MUTEX">
            <summary> The message broadcaster can not create a mutex synchronization
              object. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_MB_NOT_CREATED">
            <summary> The message broadcaster was not created. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_MB_REF_COUNT_ERROR">
            <summary> There is the error with the references counter. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_MB_RUNNING">
            <summary> The messaging subsystem is already running. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_MB_INVALID_SYNC_METHOD">
            <summary> Invalid or unknown synchronization method. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_MB_WAIT_TIMEOUT">
            <summary> A timeout appeared during wait operation. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_MB_WAIT_FAILED">
            <summary> Wait operation failed. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_MB_RECEIVER_NOT_FOUND">
            <summary> A message receiver with given ID was not found. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_WINRT_BASE">
            <summary> The base WinRT subsystem error code. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_WINRT_UNABLE_CREATE_MUTEX">
            <summary> Unable to create synchronization mutex for WinRT
              control. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_WINRT_UNABLE_LOAD_CORE_DLL">
            <summary> unable to load WinRT core DLL. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_WINRT_UNABLE_LOAD_STRING_DLL">
            <summary> unable to load WinRT string DLL. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_WINRT_INIT_FAILED">
            <summary> WinRT initialization failed. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_WINRT_UNABLE_CREATE_STRING">
            <summary> Unable to create string. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_WINRT_UNABLE_ACTIVATE_INSTANCE">
            <summary> Unable to active instance of the required class. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_WINRT_UNABLE_CREATE_INTERFACE">
            <summary> Unable to create interface of the required class. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_WINRT_ASYNC_OPERATION_FAILED">
            <summary> Failed to read asynchronous operation status. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_WINRT_ASYNC_OPERATION_CANCELLED">
            <summary> An asynchronous operation canceled. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_WINRT_ASYNC_OPERATION_ERROR">
            <summary> An asynchronous operation completed with error. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_WINRT_DETACH_BUFFER_FAILED">
            <summary> Unable to detach raw buffer. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_WINRT_ASYNC_OPERATION_TIMEOUT">
            <summary> An asynchronous operation timed out. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_WINUSB_BASE">
            <summary> The base error code for all WinUSB subsystem errors. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_WINUSB_UNABLE_CREATE_MUTEX">
            <summary> Unable create WinSUB subsystem synchronization mutex. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_WINUSB_UNABLE_LOAD">
            <summary> WinUSB subsystem is not available on your system. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_WINUSB_NOT_LOADED">
            <summary> WinUSB subsystem was not loaded. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_WINUSB_UNEXPECTED">
            <summary> Unknown or unexpected WinUSB error. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_WINUSB_DEVICE_OPENED">
            <summary> A WinUSB device is already opened. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_WINUSB_DEVICE_CLOSED">
            <summary> A WinUSB device is closed. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_WINUSB_DEVICE_NOT_OPENED">
            <summary> A WinUSB device is not opened. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_WINUSB_OPEN_DEVICE_FAILED">
            <summary> Unable to open specified WinUSB device. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_WINUSB_INIT_DEVICE_FAILED">
            <summary> Initialize WinUSB device failed. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_WINUSB_CONTROL_TRANSFER_FAILED">
            <summary> Control transfer failed. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_WINUSB_READ_PIPE_FAILED">
            <summary> Read data from pipe (endpoint) failed. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_THREAD_BASE">
            <summary> The base error code for all WCL thread errors. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_THREAD_RUNNING">
            <summary> The thread is already running. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_THREAD_UNABLE_CREATE_THREAD_INIT_EVENT">
            <summary> Unable to create thread initialization event. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_THREAD_UNABLE_CREATE_THREAD">
            <summary> Unable to create thread. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_THREAD_NOT_RUNNING">
            <summary> The thread is not running. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_THREAD_INVALID_SYNCHRONIZATION">
            <summary> The synchronization method is not supported by the wclThread
              class. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_THREAD_MESSAGE_REGISTRATION_FAILED">
            <summary> Unable to register thread message. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_THREAD_WINDOW_CREATION_FAILED">
            <summary> Unable to create thread window. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_THREAD_INITIALIZATION_FAILED">
            <summary> Thread user initialization failed. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_THREAD_UNABLE_CREATE_THREAD_TERM_EVENT">
            <summary> Unable to create thread termination event. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_THREAD_UNABLE_CREATE_THREAD_SYNC_EVENT">
            <summary> Unable to create thread synchronization event. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_PEM_BASE">
            <summary> The base error code for Power Events monitor error codes. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_PEM_OPENED">
            <summary> The power events monitor is already opened. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_PEM_CLOSED">
            <summary> The power events monitor is already closed. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_PEM_FEATURE_NOT_SUPPORTED">
            <summary> The power state monitoring feature is supported on Windows 8 and
              above. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_PEM_GET_POWER_STATUS_FAILED">
            <summary> Unable to get system power status. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_PEM_CREATE_INIT_EVENT_FAILED">
            <summary> Unable to create Power Events Window initialization
              event. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_PEM_CREATE_WND_THREAD_FAILED">
            <summary> Unable to create and start Power Event Window thread. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_PEM_CREATE_WND_FAILED">
            <summary> Unable to create Power Events Window. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_CFGMGR_BASE">
            <summary> The base error code for Configuration Manager error codes. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_CFGMGR_LOAD_FAILED">
            <summary> Unable to load Configuration Manager API. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_LAF_BASE">
            <summary> The base error code for Limited Access Feature
              errors. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_LAF_NOT_FOUND">
            <summary> The LAF ID was not found. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_LAF_OPEN_KEY_FAILED">
            <summary> Unable to access the LAF key information. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_LAF_KEY_NOT_FOUND">
            <summary> The LAF key was not found. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_LAF_DLL_LOAD_FAILED">
            <summary> Unable to load encryption DLL. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_LAF_FUNC_NOT_FOUND">
            <summary> Encryption functions not found. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_LAF_ACQUIRE_CONTEXT_FAILED">
            <summary> Unable to acquire encryption context. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_LAF_CREATE_HASH_FAILED">
            <summary> Unable to build hash. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_LAF_CRYPT_HASH_FAILED">
            <summary> Unable to crypt the hash. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_LAF_GET_CRYPTED_HASH_FAILED">
            <summary> Unable to get crypted hash. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_LAF_IDENTITY_NOT_FOUND">
            <summary> An application file does not contain the identity
              resource. </summary> 
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_LAF_IDENTITY_READ_FAILED">
            <summary> Unable to read the identity. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_LAF_IDENTITY_INVALID">
            <summary> The identity has invalid format. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_LAF_IDENTITY_EMPTY">
            <summary> The identity is empty. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_LAF_IDENTITY_INVALID_FORMAT">
            <summary> The identity has invalid format. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_LAF_UNLOCK_REQUEST_FAILED">
            <summary> Request to unlock limited feature failed. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_LAF_GET_REQUEST_STATUS_FAILED">
            <summary> Unable to get unlock request status. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_LAF_LOCKED">
            <summary> The LAF is locked. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_LAF_UNAVAILABLE">
            <summary> The LAF unavailable because was not found. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_LAF_STATUS_UNKNOWN">
            <summary> Unknown or undefined LAF status. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_LAF_MANAGER_OPENED">
            <summary> The LAF manager has already been opened. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_LAF_MANAGER_NOT_OPENED">
            <summary> The LAF manager was not opened. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_LAF_MANAGER_CLOSED">
            <summary> The LAF manager is closed. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_LAF_MANAGER_CREATE_INIT_EVENT_FAILED">
            <summary> Create LAF manager initialization event failed. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_LAF_MANAGER_CREATE_TERM_EVENT_FAILED">
            <summary> Create LAF manager termination event failed. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_LAF_MANAGER_START_THREAD_FAILED">
            <summary> Unable to start the LAF manager working thread. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_LAF_MANAGER_FEATURE_NOT_SUPPORTED">
            <summary> The LAF feature is not supported on this platform. </summary>
        </member>
        <member name="F:wclCommon.wclErrors.WCL_E_LAF_MANAGER_GET_LAF_LIST_FAILED">
            <summary> Unable to access the LAF list. </summary>
        </member>
        <member name="T:wclCommon.wclException">
            <summary> The base WCL exceptions class. </summary>
        </member>
        <member name="M:wclCommon.wclException.#ctor(System.String)">
            <summary> Initializes a new instance of the exception class with a specified error message. </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:wclCommon.wclEInvalidArgument">
            <summary> One or more arguments passed into constructor are invalid. </summary>
            <seealso cref="T:wclCommon.wclException" />
        </member>
        <member name="M:wclCommon.wclEInvalidArgument.#ctor(System.String)">
            <summary> Initializes a new instance of the exception class with a specified error message. </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:wclCommon.wclEOutOfMemory">
            <summary> Not enough system memory. </summary>
            <seealso cref="T:wclCommon.wclException" />
        </member>
        <member name="M:wclCommon.wclEOutOfMemory.#ctor(System.String)">
            <summary> Initializes a new instance of the exception class with a specified error message. </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:wclCommon.wclEPowerEvents">
            <summary> The Power Events Monitor exceptions class. </summary>
            <seealso cref="T:wclCommon.wclException" />
        </member>
        <member name="M:wclCommon.wclEPowerEvents.#ctor(System.String)">
            <summary> Initializes a new instance of the exception class with a specified error message. </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:wclCommon.wclErrorInformation">
            <summary> The class provides methods to get human readable information
              about Wireless Communication Library errors. </summary>
        </member>
        <member name="M:wclCommon.wclErrorInformation.#ctor">
            <summary> Creates new object. </summary>
        </member>
        <member name="M:wclCommon.wclErrorInformation.Finalize">
            <summary> Free the object. </summary>
        </member>
        <member name="M:wclCommon.wclErrorInformation.Close">
            <summary> Closes the errors description file. </summary>
            <returns> <c>True</c> if the method completed with success. <c>False</c>
              otherwise. </returns>
        </member>
        <member name="M:wclCommon.wclErrorInformation.Open(System.String)">
            <summary> Opens the errors description file. </summary>
            <param name="FileName"> Full path (including file name) to the
              errors.xml file. </param>
            <returns> <c>True</c> if errors file was opened. <c>False</c>
              otherwise. </returns>
        </member>
        <member name="M:wclCommon.wclErrorInformation.GetDetails(System.Int32,wclCommon.wclErrorDetails@)">
            <summary> Gets the Wireless Communication Library error
              details. </summary>
            <param name="Error"> An error code. </param>
            <param name="Details"> If the method completed with success the
              Details structure will be fulfilled with the specified error
              details. </param>
            <returns> If the method completed with success the returning value is
              <c>True</c>. If the method failed the returning value is
              <c>False</c>. </returns>
            <seealso cref="T:wclCommon.wclErrorDetails" />
        </member>
        <member name="P:wclCommon.wclErrorInformation.Opened">
            <summary> Gets the file state. </summary>
            <value> <c>True</c> if the errors description file is opened.
              <c>False</c> otherwise. </value>
        </member>
        <member name="T:wclCommon.wclErrorDetails">
            <summary> The structure contains detailed information about Wireless
              Communication Library error code. </summary>
        </member>
        <member name="F:wclCommon.wclErrorDetails.Error">
            <summary> The error code. </summary>
        </member>
        <member name="F:wclCommon.wclErrorDetails.Framework">
            <summary> The framework name that the error relates to. </summary>
        </member>
        <member name="F:wclCommon.wclErrorDetails.Category">
            <summary> The error category. </summary>
        </member>
        <member name="F:wclCommon.wclErrorDetails.Constant">
            <summary> The error constant name. </summary>
        </member>
        <member name="F:wclCommon.wclErrorDetails.Description">
            <summary> The human readable error description. </summary>
        </member>
        <member name="T:wclCommon.wclHelpers">
            <summary> This static class includes some helpers methods used in WCL. </summary>
            <summary> This static class includes some helpers methods used in WCL. </summary>
            <summary> This static class includes some helpers methods used in WCL. </summary>
        </member>
        <member name="M:wclCommon.wclHelpers.LoWord(System.UInt32)">
            <summary> Returns Lo Word of the <c>UInt32</c> value. </summary>
            <param name="nValue"> The <c>UInt32</c> value. </param>
            <returns> The Lo Word. </returns>
        </member>
        <member name="M:wclCommon.wclHelpers.HiWord(System.UInt32)">
            <summary> Returns Hi Word of the <c>UInt32</c> value. </summary>
            <param name="nValue"> The <c>UInt32</c> value. </param>
            <returns> The Hi Word. </returns>
        </member>
        <member name="M:wclCommon.wclHelpers.LoByte(System.UInt16)">
            <summary> Returns Lo Byte of the <c>UInt16</c> value. </summary>
            <param name="nValue"> The <c>UInt16</c> value. </param>
            <returns> The Lo Byte. </returns>
        </member>
        <member name="M:wclCommon.wclHelpers.HiByte(System.UInt16)">
            <summary> Returns Hi Byte of the <c>UInt16</c> value. </summary>
            <param name="nValue"> The <c>UInt16</c> value. </param>
            <returns> The Hi Byte. </returns>
        </member>
        <member name="M:wclCommon.wclHelpers.HResultFromWin32(System.Int32)">
            <summary> Converts Win32 error code into HRESULT. </summary>
            <param name="Win32Error"> Win32 error code. </param>
            <returns> HRESULT value represents the given Win32 error code. </returns>
        </member>
        <member name="M:wclCommon.wclHelpers.Succeeded(System.Int32)">
            <summary> Provides a generic test for success on any status value. </summary>
            <param name="Status"> The status code. This value can be an HRESULT or an SCODE.
              A non-negative number indicates success.  </param>
            <returns> <c>true</c> if <c>Status</c> represents a success status value; otherwise,
              <c>false</c>. </returns>
        </member>
        <member name="M:wclCommon.wclHelpers.Failed(System.Int32)">
            <summary> Provides a generic test for failure on any status value. </summary>
            <param name="Status"> The status code. This value can be an HRESULT or an SCODE.
              A negative number indicates failure. </param>
            <returns> <c>true</c> if <c>Status</c> represents a failed status value; otherwise,
              <c>false</c>. </returns>
        </member>
        <member name="M:wclCommon.wclHelpers.IncPtr(System.IntPtr,System.Int32)">
            <summary> Increments a pointer on given offset. </summary>
            <param name="p"> The pointer to be incremented. </param>
            <param name="off"> The increment value (offset). </param>
            <returns> Returns a new pointer. </returns>
        </member>
        <member name="M:wclCommon.wclHelpers.ZeroHGlobal(System.IntPtr,System.Int32)">
            <summary> Zeros the memory allocated by the AllocHGlobal. </summary>
            <param name="p"> The InPtr returned by the AllocHGlobal method. </param>
            <param name="Size"> the buffer size in bytes. </param>
        </member>
        <member name="M:wclCommon.wclHelpers.AllocHGlobal(System.Int32)">
            <summary> Allocates and zeros memory. </summary>
            <param name="Size"> Memory size. </param>
            <returns> The <c>IntPtr</c> value for allocated memory or <c>InPtr.Zero</c> in case of
              out of memory. </returns>
        </member>
        <member name="T:wclCommon.wclMessageBroadcaster">
            <summary> The message broadcaster manages broadcast messages between
              subscribers (message receivers subscribed for broadcast messages).
              Also the message broadcaster monitors changes in the hardware
              configuration and notifies subscribers about the changes. </summary>
        </member>
        <member name="M:wclCommon.wclMessageBroadcaster.#ctor">
            <summary> Create the message broadcaster. </summary>
            <remarks> An application must never create the broadcaster
              directly. It is created when needed by the message
              receivers. </remarks>
        </member>
        <member name="M:wclCommon.wclMessageBroadcaster.Finalize">
            <exclude />
        </member>
        <member name="M:wclCommon.wclMessageBroadcaster.Dispose">
            <summary> Frees the message broadcaster. </summary>
            <remarks> An application must never destroy the broadcaster
              directly. It is destroyed when not needed any more by the message
              receivers. </remarks>
        </member>
        <member name="M:wclCommon.wclMessageBroadcaster.Broadcast(wclCommon.wclMessage)">
            <summary> Broadcasts a Message to all message receivers. </summary>
            <param name="Message"> The <see cref="T:wclCommon.wclMessage" /> object represents
              the message. A caller is responsible to free the <c>Message</c> object
              after procedure call. </param>
            <returns> If the function succeed the returns value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the function returns one
              of the WCL error codes. </returns>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclCommon.wclMessageBroadcaster.Post(System.Int32,wclCommon.wclMessage)">
            <summary> Posts a Message to a message receiver with specified
              ID. </summary>
            <param name="Id"> A message receiver ID. </param>
            <param name="Message"> The <see cref="T:wclCommon.wclMessage" /> object represents
              the message. A caller is responsible to free the <c>Message</c> object
              after procedure the call. </param>
            <returns> If the function succeed the returns value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the function returns one
              of the WCL error codes. </returns>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclCommon.wclMessageBroadcaster.ProcessMessages">
            <summary> Force WCL message processing for current thread. </summary>
            <returns> If the function succeed the returns value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the function returns one
              of the WCL error codes. </returns>
            <remarks> This function can be used to force WCL message processing in
              case if your execution thread is blocked. </remarks>
        </member>
        <member name="T:wclCommon.wclAudioCategoryMessage">
            <summary> The Audio category messages base class. </summary>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclCommon.wclAudioCategoryMessage.#ctor(System.Byte)">
            <summary> Creates new Audio message object. </summary>
            <param name="Id"> The message ID. </param>
        </member>
        <member name="T:wclCommon.wclBluetoothCategoryMessage">
            <summary> The Bluetooth category messages base class. </summary>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclCommon.wclBluetoothCategoryMessage.#ctor(System.Byte)">
            <summary> Creates new Bluetooth message object. </summary>
            <param name="Id"> The message ID. </param>
        </member>
        <member name="T:wclCommon.wclConnectionCategoryMessage">
            <summary> The Connection category messages base class. </summary>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclCommon.wclConnectionCategoryMessage.#ctor(System.Byte)">
            <summary> Creates new Connection message object. </summary>
            <param name="Id"> The message ID. </param>
        </member>
        <member name="T:wclCommon.wclMessageCategory">
            <summary> The message categories. </summary>
        </member>
        <member name="F:wclCommon.wclMessageCategory.mcAudio">
            <summary> The Audio Framework messages category. </summary>
        </member>
        <member name="F:wclCommon.wclMessageCategory.mcBluetooth">
            <summary> The Bluetooth Framework messages category. </summary>
        </member>
        <member name="F:wclCommon.wclMessageCategory.mcConnection">
            <summary> The Connections and Connection providers messages
              category. </summary>
        </member>
        <member name="F:wclCommon.wclMessageCategory.mcIrDA">
            <summary> The IrDA Framework messages category. </summary>
        </member>
        <member name="F:wclCommon.wclMessageCategory.mcPower">
            <summary> The Power Monitoring subsystem messages category. </summary>
        </member>
        <member name="F:wclCommon.wclMessageCategory.mcSerial">
            <summary> The Serial Framework messages category. </summary>
        </member>
        <member name="F:wclCommon.wclMessageCategory.mcSystem">
            <summary> The System messages category. </summary>
        </member>
        <member name="F:wclCommon.wclMessageCategory.mcUsb">
            <summary> The USB Framework messages category. </summary>
        </member>
        <member name="F:wclCommon.wclMessageCategory.mcUser">
            <summary> The User Defined messages category. </summary>
        </member>
        <member name="F:wclCommon.wclMessageCategory.mcWiFi">
            <summary> The WiFi Framework messages category. </summary>
        </member>
        <member name="F:wclCommon.wclMessageCategory.mcWiiRemote">
            <summary> The WiiRemote Framework messages category. </summary>
        </member>
        <member name="T:wclCommon.wclIrDACategoryMessage">
            <summary> The IrDA category messages base class. </summary>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclCommon.wclIrDACategoryMessage.#ctor(System.Byte)">
            <summary> Creates new IrDA message object. </summary>
            <param name="Id"> The message ID. </param>
        </member>
        <member name="T:wclCommon.wclPowerCategoryMessage">
            <summary> The Power Monitoring category messages base class. </summary>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclCommon.wclPowerCategoryMessage.#ctor(System.Byte)">
            <summary> Creates new Power message object. </summary>
            <param name="Id"> The message ID. </param>
        </member>
        <member name="T:wclCommon.wclSerialCategoryMessage">
            <summary> The Serial category messages base class. </summary>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclCommon.wclSerialCategoryMessage.#ctor(System.Byte)">
            <summary> Creates new Serial message object. </summary>
            <param name="Id"> The message ID. </param>
        </member>
        <member name="T:wclCommon.wclSystemCategoryMessage">
            <summary> The System category messages base class. </summary>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclCommon.wclSystemCategoryMessage.#ctor(System.Byte)">
            <summary> Create a new System message object. </summary>
            <param name="Id"> The message ID. </param>
        </member>
        <member name="F:wclCommon.wclSystemCategoryMessage.WCL_MSG_ID_SYS_HARDWARE_CHANGED">
            <summary> The Hardware Changed message ID. </summary>
        </member>
        <member name="T:wclCommon.wclUserDefinedCategoryMessage">
            <summary> The User Defined messages base class. </summary>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclCommon.wclUserDefinedCategoryMessage.#ctor(System.Byte)">
            <summary> Creates new User Defined message object. </summary>
            <param name="Id"> The message ID. </param>
        </member>
        <member name="T:wclCommon.wclUsbCategoryMessage">
            <summary> The USB category messages base class. </summary>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclCommon.wclUsbCategoryMessage.#ctor(System.Byte)">
            <summary> Creates new USB message object. </summary>
            <param name="Id"> The message ID. </param>
        </member>
        <member name="T:wclCommon.wclWiFiCategoryMessage">
            <summary> The WiFi category messages base class. </summary>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclCommon.wclWiFiCategoryMessage.#ctor(System.Byte)">
            <summary> Creates new WiFi message object. </summary>
            <param name="Id"> The message ID. </param>
        </member>
        <member name="T:wclCommon.wclWiiRemoteCategoryMessage">
            <summary> The Wii Remote category messages base class. </summary>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclCommon.wclWiiRemoteCategoryMessage.#ctor(System.Byte)">
            <summary> Creates new Wii Remote message object. </summary>
            <param name="Id"> The message ID. </param>
        </member>
        <member name="T:wclCommon.wclMessage">
            <summary> The message object. </summary>
        </member>
        <member name="M:wclCommon.wclMessage.Free">
            <summary> Frees the message object. </summary>
        </member>
        <member name="M:wclCommon.wclMessage.#ctor(System.Byte,wclCommon.wclMessageCategory)">
            <summary> Create new message object. </summary>
            <param name="Id"> The message ID. </param>
            <param name="Category"> The message category ID. </param>
            <seealso cref="T:wclCommon.wclMessageCategory" />
        </member>
        <member name="M:wclCommon.wclMessage.AddRef">
            <summary> Increments the reference count of the object. This method
              should be called for every new reference to the object. </summary>
            <returns> The method returns the new reference count. This value is
              intended to be used only for test purposes. </returns>
        </member>
        <member name="M:wclCommon.wclMessage.Release">
            <summary> Decrements the reference count for an object. </summary>
            <returns> The method returns the new reference count. This value is
              intended to be used only for test purposes. </returns>
            <remarks> When the reference count on an object reaches zero,
              <c>Release</c> causes the object to free itself. When the released
              pointer is the only existing reference to an object, the
              implementation frees the object. </remarks>
        </member>
        <member name="P:wclCommon.wclMessage.Category">
            <summary> Gets the message category ID. </summary>
            <value> The message category ID. </value>
            <seealso cref="T:wclCommon.wclMessageCategory" />
        </member>
        <member name="P:wclCommon.wclMessage.Id">
            <summary> Gets the message ID. </summary>
            <value> The message ID. </value>
        </member>
        <member name="P:wclCommon.wclMessage.Created">
            <summary> Gets message created timestamp. </summary>
            <value> The timestamp in ticks when the message was created. </value>
        </member>
        <member name="P:wclCommon.wclMessage.Queued">
            <summary> Gets the message queued timestamp. </summary>
            <value> The timestamp in ticks when the message was placed to the
              messages queue. If the value is 0 then the message was not
              queued. </value>
        </member>
        <member name="P:wclCommon.wclMessage.Processed">
            <summary> Gets the message processed timestamp. </summary>
            <value> The timestamp on ticks when the message was processed. If the
              message was not processed the value is 0. </value>
        </member>
        <member name="T:wclCommon.wclHardwareChangeMessage">
            <summary> The Hardware Changed message is broadcast to all subscribers
              when changes in the hardware configuration have been detected. The
              message ID is
              <see cref="F:wclCommon.wclSystemCategoryMessage.WCL_MSG_ID_SYS_HARDWARE_CHANGED" />. </summary>
            <seealso cref="T:wclCommon.wclSystemCategoryMessage" />
        </member>
        <member name="M:wclCommon.wclHardwareChangeMessage.#ctor(System.Guid,System.Guid,System.String,System.Boolean)">
            <summary> Creates new Hardware Changed message object. </summary>
            <param name="InterfaceClass"> The device interface class GUID. </param>
            <param name="DeviceClass"> The device class GUID. </param>
            <param name="Instance"> The device instance string. </param>
            <param name="Inserted"> <c>true</c> if the device has been
              inserted. </param>
        </member>
        <member name="P:wclCommon.wclHardwareChangeMessage.InterfaceClass">
            <summary> Gets the device interface class GUID. </summary>
            <value> The device interface class GUID. </value>
        </member>
        <member name="P:wclCommon.wclHardwareChangeMessage.DeviceClass">
            <summary> Gets the device class GUID. </summary>
            <value> The device class GUID. </value>
        </member>
        <member name="P:wclCommon.wclHardwareChangeMessage.Instance">
            <summary> Gets the device instance string. </summary>
            <value> The device instance string. </value>
        </member>
        <member name="P:wclCommon.wclHardwareChangeMessage.Inserted">
            <summary> Gets the device state. </summary>
            <value> <c>true</c> if the device has been inserted. </value>
        </member>
        <member name="T:wclCommon.wclMessageProcessingMethod">
            <summary> Message processing methods used in inter-threading
              notifications. </summary>
        </member>
        <member name="F:wclCommon.wclMessageProcessingMethod.mpAsync">
            <summary> Asynchronous message processing. All events are called in a
              separate thread. An application is responsible for the synchronization
              with UI thread. Must be used carefully. </summary>
        </member>
        <member name="F:wclCommon.wclMessageProcessingMethod.mpSync">
            <summary> Synchronous message processing method based on Windows
              Messages. </summary>
            <remarks> This method is recommended for single threading UI
              applications. </remarks>
        </member>
        <member name="T:wclCommon.wclMessageEvent">
            <summary> The <c>OnMessage</c> event handler prototype. </summary>
            <param name="Message"> The <see cref="T:wclCommon.wclMessage" /> object represented the
              message. </param>
            <remarks> The <c>Message</c> object is valid only inside an event
              handler. </remarks>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="T:wclCommon.wclMessageReceiver">
            <summary> The Wireless Communication Library message receiver. </summary>
        </member>
        <member name="M:wclCommon.wclMessageReceiver.DoMessage(wclCommon.wclMessage)">
            <summary> Calls the <c>OnMessage</c> event </summary>
            <param name="Message"> The <see cref="T:wclCommon.wclMessage" /> object. </param>
            <remarks> The <c>Message</c> parameter is valid only inside the
              method. </remarks>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclCommon.wclMessageReceiver.#ctor">
            <summary> Creates new message receiver object. </summary>
        </member>
        <member name="M:wclCommon.wclMessageReceiver.Finalize">
            <summary> Frees the message receiver. </summary>
        </member>
        <member name="M:wclCommon.wclMessageReceiver.Close">
            <summary> Closes the message receiver. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclCommon.wclMessageReceiver.Open(wclCommon.wclMessageProcessingMethod)">
            <summary> Opens the message receiver. </summary>
            <param name="Method"> The message processing method that should be used
              by the Message Receiver. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclCommon.wclMessageProcessingMethod" />
        </member>
        <member name="M:wclCommon.wclMessageReceiver.Post(wclCommon.wclMessage,System.Boolean)">
            <summary> Places a message to the messages queue and starts processing
              the messages. </summary>
            <param name="Message"> The <see cref="T:wclCommon.wclMessage" /> object. A caller
              is responsible to dispose the message object passed into the
              method. </param>
            <param name="Sync"> <para> If the <c>Sync</c> parameter is <c>True</c>
              and the thread that called the method is the same that used to call
              the <c>Open</c> method the message will be delivered without placing
              it to the messages queue. </para>
              <para> If the thread that posting the message is different from one
              that was used to call the <c>Open</c> method or the <c>Sync</c>
              parameter is <c>False</c> (the default value) the message will be
              placed to the messages queue. </para> </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> If sync messages is posted it can be processed before any
              other messages in the queue. </remarks>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclCommon.wclMessageReceiver.ProcessAllMessages">
            <summary> Processes all messages in the messages queue. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="P:wclCommon.wclMessageReceiver.Id">
            <summary> Gets the receiver's ID. </summary>
            <value> Unique message receiver ID. </value>
        </member>
        <member name="P:wclCommon.wclMessageReceiver.Listening">
            <summary> Gets the receiver status. </summary>
            <value> <c>True</c> if the receiver is listening for the
              messages. </value>
        </member>
        <member name="P:wclCommon.wclMessageReceiver.Method">
            <summary> Gets a message processing method supported by the message
              receiver. </summary>
            <value> A message processing method. </value>
            <seealso cref="T:wclCommon.wclMessageProcessingMethod" />
        </member>
        <member name="P:wclCommon.wclMessageReceiver.OpenThreadId">
            <summary> Gets an ID of a thread that was used to call the <c>Open</c>
              method. </summary>
            <value> Thread ID. </value>
        </member>
        <member name="E:wclCommon.wclMessageReceiver.OnMessage">
            <summary> The event called when new message was received. </summary>
            <seealso cref="T:wclCommon.wclMessageEvent" />
        </member>
        <member name="T:wclCommon.wclOsVersion">
            <summary> The class provides information about OS version. </summary>
        </member>
        <member name="P:wclCommon.wclOsVersion.IsWinIot">
            <summary> Checks if software runs on Windows 10 IoT. </summary>
            <value> Returns <c>true</c> if it runs on Windows 10 IoT. Otherwise
              returns <c>false</c>. </value>
        </member>
        <member name="P:wclCommon.wclOsVersion.OsType">
            <summary> Gets OS type. </summary>
            <value> The OS type. </value>
            <seealso cref="T:wclCommon.wclOsType" />
        </member>
        <member name="P:wclCommon.wclOsVersion.OsBuild">
            <summary> Gets the OS build number. </summary>
            <value> The OS build number . </value>
            <remarks> <para> For Win 10 <c>Build</c> can be translated to OS version
              (release) using the table below. </para>
              <para><c> Build </c> <c> Release </c></para>
              <para><c>=======</c> <c>=========</c></para>
              <para><c> 10240 </c> <c>   1507  </c></para>
              <para><c> 10586 </c> <c>   1511  </c></para>
              <para><c> 14393 </c> <c>   1607  </c></para>
              <para><c> 15063 </c> <c>   1703  </c></para>
              <para><c> 16299 </c> <c>   1709  </c></para>
              <para><c> 17134 </c> <c>   1803  </c></para>
              <para><c> 17763 </c> <c>   1809  </c></para>
              <para><c> 18362 </c> <c>   1903  </c></para>
              <para><c> 18363 </c> <c>   1909  </c></para>
              <para><c> 19041 </c> <c>   2004  </c></para>
              <para><c> 19042 </c> <c>   20H2  </c></para>
              <para><c> 19043 </c> <c>   21H1  </c></para>
              <para><c> 19044 </c> <c>   21H2  </c></para>
              <para><c> 19045 </c> <c>   22H2  </c></para>
              <para></para>
            <para> For Win 11 <c>Build</c> can be translated to OS version
              (release) using the table below. </para>
              <para><c> Build </c> <c> Release </c></para>
              <para><c>=======</c> <c>=========</c></para>
              <para><c> 22000 </c> <c>   21H2  </c></para>
              <para><c> 22621 </c> <c>   22H2  </c></para>
              <para><c> 22631 </c> <c>   23H2  </c></para>
              <para><c> 26100 </c> <c>   24H2  </c></para>
              <para></para>
            <para> For Mac OS check the <c>OsMajor</c> and <c>OsMinor</c>
              numbers. </para> </remarks>
        </member>
        <member name="P:wclCommon.wclOsVersion.OsMajor">
            <summary> Gets the OS major version. </summary>
            <value> The OS major version. </value>
            <remarks> For Mac OS this is the OS version </remarks>
        </member>
        <member name="P:wclCommon.wclOsVersion.OsMinor">
            <summary> Get the OS minor version. </summary>
            <value> The OS minor version. </value>
        </member>
        <member name="T:wclCommon.wclOsType">
            <summary> Operating System type. </summary>
        </member>
        <member name="F:wclCommon.wclOsType.osUnknown">
            <summary> Unknown OS. </summary>
        </member>
        <member name="F:wclCommon.wclOsType.osMacOS">
            <summary> Mac OS. </summary>
        </member>
        <member name="F:wclCommon.wclOsType.osWinXP">
            <summary> Windows XP. </summary>
        </member>
        <member name="F:wclCommon.wclOsType.osWinVista">
            <summary> Windows Vista. </summary>
        </member>
        <member name="F:wclCommon.wclOsType.osWin7">
            <summary> Windows 7. </summary>
        </member>
        <member name="F:wclCommon.wclOsType.osWin8">
            <summary> Windows 8. </summary>
        </member>
        <member name="F:wclCommon.wclOsType.osWin81">
            <summary> Windows 8.1. </summary>
        </member>
        <member name="F:wclCommon.wclOsType.osWin10">
            <summary> Windows 10. </summary>
        </member>
        <member name="F:wclCommon.wclOsType.osWin11">
            <summary> Windows 11. </summary>
        </member>
        <member name="T:wclCommon.wclACLineStatus">
            <summary> The AC power status. </summary>
        </member>
        <member name="F:wclCommon.wclACLineStatus.lsOffline">
            <summary> Offline. </summary>
        </member>
        <member name="F:wclCommon.wclACLineStatus.lsOnline">
            <summary> Online. </summary>
        </member>
        <member name="F:wclCommon.wclACLineStatus.lsBackup">
            <summary> Backupo power. </summary>
        </member>
        <member name="F:wclCommon.wclACLineStatus.lsUnknown">
            <summary> Unknown status. </summary>
        </member>
        <member name="T:wclCommon.wclBatteryChargeStatus">
            <summary> The battery charge statuses. </summary>
        </member>
        <member name="F:wclCommon.wclBatteryChargeStatus.csCapacityHigh">
            <summary> High—the battery capacity is at more than 66
              percent. </summary>
        </member>
        <member name="F:wclCommon.wclBatteryChargeStatus.csCapacityLow">
            <summary> Low—the battery capacity is at less than 33
              percent. </summary>
        </member>
        <member name="F:wclCommon.wclBatteryChargeStatus.csCapacityCritical">
            <summary> Critical—the battery capacity is at less than five
              percent. </summary>
        </member>
        <member name="F:wclCommon.wclBatteryChargeStatus.csCharging">
            <summary> Charging. </summary>
        </member>
        <member name="F:wclCommon.wclBatteryChargeStatus.csNoSystemBattery">
            <summary> No system battery. </summary>
        </member>
        <member name="F:wclCommon.wclBatteryChargeStatus.csUnknown">
            <summary> Unknown status—unable to read the battery flag
              information. </summary>
        </member>
        <member name="T:wclCommon.wclPowerStateChangedEvent">
            <summary> The <c>OnPowerStateChanged</c> event handler
              prototype </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="State"> The new power state. </param>
            <seealso cref="T:wclCommon.wclPowerState" />
        </member>
        <member name="T:wclCommon.wclPowerEventsMonitor">
            <summary> The class allows an application to receive power state changes
              notifications. </summary>
            <summary> The class allows an application to receive power state changes
              notifications. </summary>
        </member>
        <member name="M:wclCommon.wclPowerEventsMonitor.MessageReceived(wclCommon.wclMessage)">
            <summary> The method called when a new notification message
              received. </summary>
            <param name="Message"> A <see cref="T:wclCommon.wclMessage" /> object
              represents a notification message. </param>
            <remarks> <para> This method is for internal use only. </para>
              <para> If a derived class overrides this method it must always call
              the inherited implementation first. </para> </remarks>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclCommon.wclPowerEventsMonitor.DoPowerStateChanged(wclCommon.wclPowerState)">
            <summary> Fires the <c>OnChanged</c> event. </summary>
            <param name="State"> The new power state. </param>
            <seealso cref="T:wclCommon.wclPowerState" />
        </member>
        <member name="M:wclCommon.wclPowerEventsMonitor.#ctor">
            <summary> Creates new object of the <c>wclPowerEventsMonitor</c>
              class. </summary>
        </member>
        <member name="M:wclCommon.wclPowerEventsMonitor.Close">
            <summary> Stops listening for the power events and releases all
              resources. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclCommon.wclPowerEventsMonitor.Open">
            <summary> Opens the power state changes monitor and starts listening for
              events. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclCommon.wclPowerEventsMonitor.GetPowerStatus(wclCommon.wclPowerStatus@)">
            <summary> Retrieves the power status of the system. The status indicates
              whether the system is running on AC or DC power, whether the battery
              is currently charging, how much battery life remains, and if battery
              saver is on or off. </summary>
            <param name="Status"> A <see cref="T:wclCommon.wclPowerStatus" /> structure that
              receives status information. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclCommon.wclPowerStatus" />
        </member>
        <member name="P:wclCommon.wclPowerEventsMonitor.Active">
            <summary> Gets the monitor's state. </summary>
            <value> <c>true</c> if the power state monitor is listening for power
              state changes. <c>false</c> otherwise. </value>
        </member>
        <member name="P:wclCommon.wclPowerEventsMonitor.MessageProcessing">
            <summary> Gets and sets the monitor's message processing
             method. </summary>
            <value> The message processing method. </value>
            <seealso cref="T:wclCommon.wclMessageProcessingMethod" />
            <exception cref="T:wclCommon.wclEPowerEvents" />
        </member>
        <member name="E:wclCommon.wclPowerEventsMonitor.OnPowerStateChanged">
            <summary> The event fires when the system's power state has been
              changed. </summary>
            <seealso cref="T:wclCommon.wclPowerStateChangedEvent" />
        </member>
        <member name="T:wclCommon.wclPowerStatus">
            <summary> Contains information about the power status of the
              system. </summary>
        </member>
        <member name="F:wclCommon.wclPowerStatus.ACLineStatus">
            <summary> The AC power status. </summary>
            <seealso cref="T:wclCommon.wclACLineStatus" />
        </member>
        <member name="F:wclCommon.wclPowerStatus.BatteryChargeStatus">
            <summary> The battery charge status. The set is empty if the battery is
              not being charged and the battery capacity is between low and
              high. </summary>
            <seealso cref="T:wclCommon.wclBatteryChargeStatus" />
        </member>
        <member name="F:wclCommon.wclPowerStatus.BatteryLifePercent">
            <summary> The percentage of full battery charge remaining. This member
              can be a value in the range 0 to 100, or 255 if status is
              unknown. </summary>
        </member>
        <member name="F:wclCommon.wclPowerStatus.BatterySavingState">
            <summary> The status of battery saver. <c>False</c> if the battery saver
              is off. <c>True</c> if the battery saver on. Save energy where
              possible. </summary>
        </member>
        <member name="F:wclCommon.wclPowerStatus.BatteryLifeTime">
            <summary> The number of seconds of battery life remaining, or
              <c>0xFFFFFFFF</c> if remaining seconds are unknown or if the device is
              connected to AC power. </summary>
        </member>
        <member name="F:wclCommon.wclPowerStatus.BatteryFullLifeTime">
            <summary> The number of seconds of battery life when at full charge, or
              <c>0xFFFFFFFF</c> if full battery lifetime is unknown or if the device
              is connected to AC power. </summary>
        </member>
        <member name="T:wclCommon.wclPowerState">
            <summary> The enumeration defines the system power states. </summary>
        </member>
        <member name="F:wclCommon.wclPowerState.psPowerStatusChanged">
            <summary> The power status of the computer has been changed. </summary>
        </member>
        <member name="F:wclCommon.wclPowerState.psResumeAutomatic">
            <summary>  Indicates that the system is resuming from sleep or
              hibernation. This state is delivered every time the system resumes and
              does not indicate whether a user is present. </summary>
        </member>
        <member name="F:wclCommon.wclPowerState.psResume">
            <summary> Indicates that the system is resuming from a low-power state.
              This state appears after <c>psResumeAutomatic</c> if the resume is
              triggered by user input, such as pressing a key. </summary>
        </member>
        <member name="F:wclCommon.wclPowerState.psSuspend">
            <summary> Indicates that the computer is about to enter a suspended
              state. </summary>
        </member>
        <member name="F:wclCommon.wclPowerState.psUnknown">
            <summary> Unknown power state. </summary>
        </member>
        <member name="T:wclCommon.wclThreads">
            <exclude />
        </member>
        <member name="T:wclLaf.wclLafManager">
            <summary> The Limited Access Feature (LAF) Manager class. </summary>
            <remarks> The LAF Manager allows to work with the Limited Access
              Features. </remarks>
        </member>
        <member name="M:wclLaf.wclLafManager.#ctor">
            <summary> Creates new LAF manager object. </summary>
        </member>
        <member name="M:wclLaf.wclLafManager.Finalize">
            <summary> Closes the LAF manager and releases all allocated
              resources. </summary>
        </member>
        <member name="M:wclLaf.wclLafManager.Close">
            <summary> Closes the LAF manager and releases all allocated
              resources. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclLaf.wclLafManager.Open">
            <summary> Opens the LAF manager. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclLaf.wclLafManager.Enum(System.Collections.Generic.List{System.String})">
            <summary> Enumerates available LAF. </summary>
            <param name="Laf"> The list that will be fulfilled with found
              LAF. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclLaf.wclLafManager.GetIdentity(System.String@,System.String@,System.String@)">
            <summary> Gets the application LAF identity details. </summary>
            <param name="Pfn"> If the method completed with success on output
              contains the LAF identity Package Full Name (PFN). </param>
            <param name="AppName"> If the method completed with success on output
              contains the LAF identity application name. </param>
            <param name="Publisher"> If the method completed with success on
              output contains the LAF identity publisher ID. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclLaf.wclLafManager.Unlock(System.String)">
            <summary> Unlocks the specified LAF. </summary>
            <param name="Laf"> The Limited Access Feature ID. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="P:wclLaf.wclLafManager.Active">
            <summary> Gets the LAF manager state. </summary>
            <value> <c>True</c> if the LAF manager is opened. <c>False</c> if the
              LAF manager is closed. </value>
        </member>
        <member name="T:wclSync.wclSyncObject">
            <summary> The base class for Wireless Communication Library
              synchronization objects. </summary>
        </member>
        <member name="M:wclSync.wclSyncObject.#ctor">
            <summary> Creates new synchronization object. </summary>
        </member>
        <member name="M:wclSync.wclSyncObject.Free(System.Boolean)">
            <summary> Frees the object. </summary>
            <param name="Disposing"> <c>True</c> if the <c>dispose</c> method called directly.
              <c>False</c> if the <c>Dispose</c> method called from finalizer. </param>
        </member>
        <member name="P:wclSync.wclSyncObject.Disposed">
            <summary> Gets the disposing state. </summary>
            <value> <c>True</c> if the object was disposed. </value>
        </member>
        <member name="M:wclSync.wclSyncObject.Finalize">
            <exclude />
        </member>
        <member name="M:wclSync.wclSyncObject.Dispose">
            <summary> Disposes the synchronization object. </summary>
        </member>
        <member name="T:wclSync.wclAutoResetEvent">
            <summary> The class represents an auto-reset event synchronization
               object. </summary>
            <remarks> An event object is a synchronization object whose state can be
              explicitly set to signaled by use of the SetEvent function. </remarks>
            <seealso cref="T:wclSync.wclEvent" />
        </member>
        <member name="M:wclSync.wclAutoResetEvent.#ctor(System.IntPtr)">
            <summary> Creates new event object. </summary>
            <param name="Handle"> A system dependent synchronization object
              handle. </param>
        </member>
        <member name="M:wclSync.wclAutoResetEvent.Create">
            <summary> Creates an unnamed auto-reset event object. </summary>
            <returns> If the method completed with success the returning value is
              a new <see cref="T:wclSync.wclEvent" /> object. If the method failed the
              returning value is <c>null</c>. </returns>
            <see cref="T:wclSync.wclAutoResetEvent" />
        </member>
        <member name="M:wclSync.wclAutoResetEvent.Create(System.String)">
            <summary> Creates or opens an auto-reset named event object. </summary>
            <param name="Name"> The event name. </param>
            <returns> If the method completed with success the returning value is
              a new <see cref="T:wclSync.wclEvent" /> object. If the method failed the
              returning value is <c>null</c>. </returns>
            <see cref="T:wclSync.wclAutoResetEvent" />
        </member>
        <member name="M:wclSync.wclAutoResetEvent.Create(System.String,System.Boolean@)">
            <summary> Creates or opens an auto-reset named event object. </summary>
            <param name="Name"> The event name. </param>
            <param name="Exist"> If the method completed with success the parameter
              indicates whether a named event object was just created or existing
              was opened. <c>true</c> indicates that an event object was opened.
              <c>false</c> indicates that a new event object was created. </param>
            <returns> If the method completed with success the returning value is
              a new <see cref="T:wclSync.wclEvent" /> object. If the method failed the
              returning value is <c>null</c>. </returns>
            <see cref="T:wclSync.wclAutoResetEvent" />
        </member>
        <member name="T:wclSync.wclEvent">
            <summary> The class represents an event synchronization object. </summary>
            <remarks> An event object is a synchronization object whose state can be
              explicitly set to signaled by use of the SetEvent function. </remarks>
            <seealso cref="T:wclSync.wclNamedSyncObject" />
        </member>
        <member name="M:wclSync.wclEvent.#ctor(System.IntPtr)">
            <summary> Creates new mutex object. </summary>
            <param name="Handle"> A system dependent synchronization object
              handle. </param>
        </member>
        <member name="M:wclSync.wclEvent.WaitOne">
            <summary> Waits until the object is in the signaled state. </summary>
            <returns> If the wait completed with success the returning value is
              <see cref="F:wclSync.wclWaitableSyncObject.WAIT_OBJECT_0" />. If the wait failed the returning
              value is <see cref="F:wclSync.wclWaitableSyncObject.WAIT_FAILED" />. </returns>
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_OBJECT_0" />
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_FAILED" />
        </member>
        <member name="M:wclSync.wclEvent.WaitOne(System.UInt32)">
            <summary> Waits until the object is in the signaled state or the
              time-out interval elapses. </summary>
            <param name="Timeout"> The wait timeout value. </param>
            <returns> If the wait completed with success the returning value is
              <see cref="F:wclSync.wclWaitableSyncObject.WAIT_OBJECT_0" />. If the time-out elapsed the
              returning value is <see cref="F:wclSync.wclWaitableSyncObject.WAIT_TIMEOUT" />. If the wait failed
              the returning value is  <see cref="F:wclSync.wclWaitableSyncObject.WAIT_FAILED" />. </returns>
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_OBJECT_0" />
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_TIMEOUT" />
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_FAILED" />
        </member>
        <member name="M:wclSync.wclEvent.Create(System.Boolean)">
            <summary> Creates an unnamed event object. </summary>
            <param name="ManualReset"> If this parameter is <c>true</c>, the
              method creates a manual-reset event object, which requires the use of
              the <c>ResetEvent</c> method to set the event state to nonsignaled.
              If this parameter is <c>false</c>, the method creates an auto-reset
              event object, and the system automatically resets the event state to
              nonsignaled after a single waiting thread has been released. </param>
            <returns> If the method completed with success the returning value is
              a new <see cref="T:wclSync.wclEvent" /> object. If the method failed the
              returning value is <c>null</c>. </returns>
            <see cref="T:wclSync.wclEvent" />
        </member>
        <member name="M:wclSync.wclEvent.Create(System.Boolean,System.String)">
            <summary> Creates or opens a named event object. </summary>
            <param name="ManualReset"> If this parameter is <c>true</c>, the
              method creates a manual-reset event object, which requires the use of
              the <c>ResetEvent</c> method to set the event state to nonsignaled.
              If this parameter is <c>false</c>, the method creates an auto-reset
              event object, and the system automatically resets the event state to
              nonsignaled after a single waiting thread has been released. </param>
            <param name="Name"> The event name. </param>
            <returns> If the method completed with success the returning value is
              a new <see cref="T:wclSync.wclEvent" /> object. If the method failed the
              returning value is <c>null</c>. </returns>
            <see cref="T:wclSync.wclEvent" />
        </member>
        <member name="M:wclSync.wclEvent.Create(System.Boolean,System.String,System.Boolean@)">
            <summary> Creates or opens a named event object. </summary>
            <param name="ManualReset"> If this parameter is <c>true</c>, the
              method creates a manual-reset event object, which requires the use of
              the <c>ResetEvent</c> method to set the event state to nonsignaled.
              If this parameter is <c>false</c>, the method creates an auto-reset
              event object, and the system automatically resets the event state to
              nonsignaled after a single waiting thread has been released. </param>
            <param name="Name"> The event name. </param>
            <param name="Exist"> If the method completed with success the parameter
              indicates whether a named event object was just created or existing
              was opened. <c>true</c> indicates that an event object was opened.
              <c>false</c> indicates that a new event object was created. </param>
            <returns> If the method completed with success the returning value is
              a new <see cref="T:wclSync.wclEvent" /> object. If the method failed the
              returning value is <c>null</c>. </returns>
            <see cref="T:wclSync.wclEvent" />
        </member>
        <member name="M:wclSync.wclEvent.Open(System.String)">
            <summary> Opens an existing named event object. </summary>
            <param name="Name"> The event name. </param>
            <returns> If the method completed with success the returning value is
              an opened <see cref="T:wclSync.wclEvent" /> object. If the method failed the
              returning value is <c>null</c>. </returns>
            <see cref="T:wclSync.wclEvent" />
        </member>
        <member name="M:wclSync.wclEvent.ResetEvent">
            <summary> Sets the event object to the nonsignaled state. </summary>
            <returns> If the method succeeds, the return value is <c>True</c>.
              If the method fails, the return value is <c>False</c>. </returns>
        </member>
        <member name="M:wclSync.wclEvent.SetEvent">
            <summary> Sets the event object to the signaled state. </summary>
            <returns> If the method succeeds, the return value is <c>True</c>.
              If the method fails, the return value is <c>False</c>. </returns>
        </member>
        <member name="T:wclSync.wclManualResetEvent">
            <summary> The class represents a manual-reset event synchronization
               object. </summary>
            <remarks> An event object is a synchronization object whose state can be
              explicitly set to signaled by use of the SetEvent function. </remarks>
            <seealso cref="T:wclSync.wclEvent" />
        </member>
        <member name="M:wclSync.wclManualResetEvent.#ctor(System.IntPtr)">
            <summary> Creates new mutex object. </summary>
            <param name="Handle"> A system dependent synchronization object
              handle. </param>
        </member>
        <member name="M:wclSync.wclManualResetEvent.Create">
            <summary> Creates an unnamed manual-reset event object. </summary>
            <returns> If the method completed with success the returning value is
              a new <see cref="T:wclSync.wclEvent" /> object. If the method failed the
              returning value is <c>null</c>. </returns>
            <see cref="T:wclSync.wclManualResetEvent" />
        </member>
        <member name="M:wclSync.wclManualResetEvent.Create(System.String)">
            <summary> Creates or opens a manual-reset named event object. </summary>
            <param name="Name"> The event name. </param>
            <returns> If the method completed with success the returning value is
              a new <see cref="T:wclSync.wclEvent" /> object. If the method failed the
              returning value is <c>null</c>. </returns>
            <see cref="T:wclSync.wclManualResetEvent" />
        </member>
        <member name="M:wclSync.wclManualResetEvent.Create(System.String,System.Boolean@)">
            <summary> Creates or opens a manual-reset named event object. </summary>
            <param name="Name"> The event name. </param>
            <param name="Exist"> If the method completed with success the parameter
              indicates whether a named event object was just created or existing
              was opened. <c>true</c> indicates that an event object was opened.
              <c>false</c> indicates that a new event object was created. </param>
            <returns> If the method completed with success the returning value is
              a new <see cref="T:wclSync.wclEvent" /> object. If the method failed the
              returning value is <c>null</c>. </returns>
            <see cref="T:wclSync.wclManualResetEvent" />
        </member>
        <member name="T:wclSync.wclMutex">
            <summary> The class represents a mutex synchronization object. </summary>
            <remarks> A mutex object is a synchronization object whose state is set to
              signaled when it is not owned by any thread, and nonsignaled when it is
              owned. Only one thread at a time can own a mutex object, whose name
              comes from the fact that it is useful in coordinating mutually exclusive
              access to a shared resource. </remarks>
            <seealso cref="T:wclSync.wclNamedSyncObject" />
        </member>
        <member name="M:wclSync.wclMutex.#ctor(System.IntPtr)">
            <summary> Creates new mutex object. </summary>
            <param name="Handle"> A system dependent synchronization object
              handle. </param>
        </member>
        <member name="M:wclSync.wclMutex.Create">
            <summary> Creates an unnamed mutex object. </summary>
            <returns> If the method completed with success the returning value is
              a new <c>wclMutex</c> class object. If the method failed the
              returning value is <c>null</c>. </returns>
            <seealso cref="T:wclSync.wclMutex" />
        </member>
        <member name="M:wclSync.wclMutex.Create(System.String)">
            <summary> Creates or opens a named mutex object. </summary>
            <param name="Name"> The mutex name. </param>
            <returns> If the method completed with success the returning value is
              a new <c>wclMutex</c> class object. If the method failed the
              returning value is <c>null</c>. </returns>
            <seealso cref="T:wclSync.wclMutex" />
        </member>
        <member name="M:wclSync.wclMutex.Create(System.String,System.Boolean@)">
            <summary> Creates or opens a named mutex object. </summary>
            <param name="Name"> The mutex name. </param>
            <param name="Exist"> If the method completed with success the parameter
              indicates whether a named mutex object was just created or existing
              was opened. <c>True</c> indicates that a mutex object was opened.
              <c>False</c> indicates that a new mutex object was created. </param>
            <returns> If the method completed with success the returning value is
              a new <c>wclMutex</c> class object. If the method failed the
              returning value is <c>null</c>. </returns>
            <seealso cref="T:wclSync.wclMutex" />
        </member>
        <member name="M:wclSync.wclMutex.Open(System.String)">
            <summary> Opens an existing mutex with the specified name. </summary>
            <param name="Name"> The mutex name. </param>
            <returns> If the method completed with success the returning value is
              a <c>wclMutex</c> class object. If the method failed the
              returning value is <c>null</c>. </returns>
            <seealso cref="T:wclSync.wclMutex" />
        </member>
        <member name="M:wclSync.wclMutex.Acquire">
            <summary> Acquires the mutex object. </summary>
            <returns> If the mutex acquired with success the returning value is
              <see cref="F:wclSync.wclWaitableSyncObject.WAIT_OBJECT_0" />. If the thread that owned that mutex
              has exited without releasing the mutex the returning value
              is <see cref="F:wclSync.wclWaitableSyncObject.WAIT_ABANDONED" />. If the wait failed the returning
              value is <see cref="F:wclSync.wclWaitableSyncObject.WAIT_FAILED" />. </returns>
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_OBJECT_0" />
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_ABANDONED" />
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_FAILED" />
        </member>
        <member name="M:wclSync.wclMutex.Acquire(System.UInt32)">
            <summary> Tries to acquire the mutex object during the given time-out
              interval. </summary>
            <param name="Timeout"> The wait timeout value. </param>
            <returns> If the mutex acquired with success the returning value is
              <see cref="F:wclSync.wclWaitableSyncObject.WAIT_OBJECT_0" />. If the thread that owned that mutex
              has exited without releasing the mutex the returning value
              is <see cref="F:wclSync.wclWaitableSyncObject.WAIT_ABANDONED" />. If the time-out elapsed the
              returning value is <see cref="F:wclSync.wclWaitableSyncObject.WAIT_TIMEOUT" />. If the wait failed
              the returning value is  <see cref="F:wclSync.wclWaitableSyncObject.WAIT_FAILED" />. </returns>
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_OBJECT_0" />
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_ABANDONED" />
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_TIMEOUT" />
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_FAILED" />
        </member>
        <member name="M:wclSync.wclMutex.Release">
            <summary> Releases the mutex object. </summary>
            <returns> If the method completed with success the returning value is
              <c>True</c>. </returns>
        </member>
        <member name="T:wclSync.wclNamedSyncObject">
            <summary> The base class for the Wireless Communication Library
              named synchronization objects. </summary>
            <seealso cref="T:wclSync.wclWaitableSyncObject" />
        </member>
        <member name="M:wclSync.wclNamedSyncObject.#ctor(System.IntPtr)">
            <summary> Creates new synchronization object. </summary>
            <param name="Handle"> A system dependent synchronization object
              handle. </param>
        </member>
        <member name="M:wclSync.wclNamedSyncObject.MakeUniqueName(System.String)">
            <summary> Makes unique synchronization object name. </summary>
            <param name="Name"> The synchronization object name. </param>
            <returns> The method returns the unique synchronization object name:
              the original object name expanded with the process ID. </returns>
        </member>
        <member name="T:wclSync.wclWaitableSyncObject">
            <summary> The base class for waitable synchronization objects. </summary>
            <seealso cref="T:wclSync.wclSyncObject" />
        </member>
        <member name="M:wclSync.wclWaitableSyncObject.Free(System.Boolean)">
            <summary> Frees the object. </summary>
            <param name="Disposing"> <c>True</c> if the <c>dispose</c> method called directly.
              <c>False</c> if the <c>Dispose</c> method called from finalizer. </param>
        </member>
        <member name="M:wclSync.wclWaitableSyncObject.#ctor(System.IntPtr)">
            <summary> Creates new synchronization object. </summary>
            <param name="Handle"> A system dependent synchronization object
              handle. </param>
        </member>
        <member name="M:wclSync.wclWaitableSyncObject.WaitOne">
            <summary> Waits until the object is in the signaled state. </summary>
            <returns> If the wait completed with success the returning value is
              <see cref="F:wclSync.wclWaitableSyncObject.WAIT_OBJECT_0" />. If the wait operation completed
              with success the waitable object is a mutex and the thread that owned
               that mutex has exited without releasing the mutex the returning value
              is <see cref="F:wclSync.wclWaitableSyncObject.WAIT_ABANDONED" />. If the wait failed the returning
              value is <see cref="F:wclSync.wclWaitableSyncObject.WAIT_FAILED" />. </returns>
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_OBJECT_0" />
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_ABANDONED" />
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_FAILED" />
        </member>
        <member name="M:wclSync.wclWaitableSyncObject.WaitOne(System.UInt32)">
            <summary> Waits until the object is in the signaled state or the
              time-out interval elapses. </summary>
            <param name="Timeout"> The wait timeout value. </param>
            <returns> If the wait completed with success the returning value is
              <see cref="F:wclSync.wclWaitableSyncObject.WAIT_OBJECT_0" />. If the wait operation completed
              with success the waitable object is a mutex and the thread that owned
              that mutex has exited without releasing the mutex the returning value
              is <see cref="F:wclSync.wclWaitableSyncObject.WAIT_ABANDONED" />. If the time-out elapsed the
              returning value is <see cref="F:wclSync.wclWaitableSyncObject.WAIT_TIMEOUT" />. If the wait failed
              the returning value is  <see cref="F:wclSync.wclWaitableSyncObject.WAIT_FAILED" />. </returns>
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_OBJECT_0" />
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_ABANDONED" />
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_TIMEOUT" />
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_FAILED" />
        </member>
        <member name="M:wclSync.wclWaitableSyncObject.WaitAll(wclSync.wclWaitableSyncObject[])">
            <summary> Waits until all of the specified objects are in the signaled
              state. </summary>
            <param name="Objects"> An array of waitable objects. </param>
            <returns> If the wait completed with success the returning value is
              <see cref="F:wclSync.wclWaitableSyncObject.WAIT_OBJECT_0" />. If the wait operation completed
              with success but one of the waitable object is a mutex and the thread
              that owned that mutex has exited without releasing the mutex the
              returning value is <see cref="F:wclSync.wclWaitableSyncObject.WAIT_ABANDONED" />. If the wait
              failed the returning value is
              <see cref="F:wclSync.wclWaitableSyncObject.WAIT_FAILED" />. </returns>
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_OBJECT_0" />
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_ABANDONED" />
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_FAILED" />
            <seealso cref="T:wclSync.wclWaitableSyncObject" />
        </member>
        <member name="M:wclSync.wclWaitableSyncObject.WaitAll(wclSync.wclWaitableSyncObject[],System.UInt32)">
            <summary> Waits until all of the specified objects are in the signaled
              state or the time-out interval elapses. </summary>
            <param name="Objects"> An array of waitable objects. </param>
            <param name="Timeout"> The wait timeout value. </param>
            <returns> If the wait completed with success the returning value is
              <see cref="F:wclSync.wclWaitableSyncObject.WAIT_OBJECT_0" />. If the wait operation completed
              with success but one of the waitable object is a mutex and the thread
              that owned that mutex has exited without releasing the mutex the
              returning value is <see cref="F:wclSync.wclWaitableSyncObject.WAIT_ABANDONED" />. If the time-out
              elapsed the returning value is <see cref="F:wclSync.wclWaitableSyncObject.WAIT_TIMEOUT" />. If the
              wait failed the returning value is
              <see cref="F:wclSync.wclWaitableSyncObject.WAIT_FAILED" />. </returns>
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_OBJECT_0" />
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_ABANDONED" />
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_TIMEOUT" />
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_FAILED" />
            <seealso cref="T:wclSync.wclWaitableSyncObject" />
        </member>
        <member name="M:wclSync.wclWaitableSyncObject.WaitAny(wclSync.wclWaitableSyncObject[])">
            <summary> Waits until one or all of the specified objects are in the
              signaled state. </summary>
            <param name="Objects"> An array of waitable objects. </param>
            <returns> If the wait completed with success the returning value is a
              signaled object index starting from <see cref="F:wclSync.wclWaitableSyncObject.WAIT_OBJECT_0" />.
              If the wait operation completed with success but one of the waitable
              object is a mutex and the thread that owned that mutex has exited
              without releasing the mutex the returning value is a mutex index
              starting from <see cref="F:wclSync.wclWaitableSyncObject.WAIT_ABANDONED_0" />. If the wait
              failed the returning value is
              <see cref="F:wclSync.wclWaitableSyncObject.WAIT_FAILED" />. </returns>
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_OBJECT_0" />
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_ABANDONED_0" />
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_FAILED" />
            <seealso cref="T:wclSync.wclWaitableSyncObject" />
        </member>
        <member name="M:wclSync.wclWaitableSyncObject.WaitAny(wclSync.wclWaitableSyncObject[],System.UInt32)">
            <summary> Waits until one of the specified objects are in the signaled
              state or the time-out interval elapses. </summary>
            <param name="Objects"> An array of waitable objects. </param>
            <param name="Timeout"> The wait timeout value. </param>
            <returns> If the wait completed with success the returning value is a
              signaled object index starting from <see cref="F:wclSync.wclWaitableSyncObject.WAIT_OBJECT_0" />.
              If the wait operation completed with success but one of the waitable
              object is a mutex and the thread that owned that mutex has exited
              without releasing the mutex the returning value is a mutex index
              starting from <see cref="F:wclSync.wclWaitableSyncObject.WAIT_ABANDONED_0" />. If the time-out
              elapsed the returning value is <see cref="F:wclSync.wclWaitableSyncObject.WAIT_TIMEOUT" />. If the
              wait failed the returning value is
              <see cref="F:wclSync.wclWaitableSyncObject.WAIT_FAILED" />. </returns>
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_OBJECT_0" />
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_ABANDONED_0" />
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_TIMEOUT" />
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_FAILED" />
            <seealso cref="T:wclSync.wclWaitableSyncObject" />
        </member>
        <member name="P:wclSync.wclWaitableSyncObject.Handle">
            <summary> Gets the system dependent synchronization object
              handle. </summary>
            <value> The object handle. </value>
        </member>
        <member name="F:wclSync.wclWaitableSyncObject.WAIT_INFINITE">
            <summary> Specifies the infinite wait interval. If this value is specified
              as a <c>Timeout</c> parameter value the Wait method will not returns
              until object signals. </summary>
        </member>
        <member name="F:wclSync.wclWaitableSyncObject.WAIT_OBJECT_0">
            <summary> Indicates the success wait result. </summary>
        </member>
        <member name="F:wclSync.wclWaitableSyncObject.WAIT_ABANDONED_0">
            <summary> Indicates the success wait result but one of the specified
              objects is a mutex object that was not released by the thread that owned
              the mutex object before the owning thread terminated. The returning
              value is the abandoned object index. </summary>
        </member>
        <member name="F:wclSync.wclWaitableSyncObject.WAIT_ABANDONED">
            <summary> Indicates the success wait result but the wait objects is a
              mutex object that was not released by the thread that owned the mutex
              object before the owning thread terminated. </summary>
            <seealso cref="F:wclSync.wclWaitableSyncObject.WAIT_ABANDONED_0" />
        </member>
        <member name="F:wclSync.wclWaitableSyncObject.WAIT_TIMEOUT">
            <summary> The time-out interval elapsed, and no one of the object is
              signaled. </summary>
        </member>
        <member name="F:wclSync.wclWaitableSyncObject.WAIT_FAILED">
            <summary> The wait method has failed. </summary>
        </member>
    </members>
</doc>
