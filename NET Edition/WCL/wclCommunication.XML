<?xml version="1.0"?>
<doc>
    <assembly>
        <name>wclCommunication</name>
    </assembly>
    <members>
        <member name="T:wclCommunication.wclConnectionErrors">
            <summary> Connections error codes. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_CONNECTION_BASE">
            <summary> The base error code for all connection errors. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_CONNECTION_ACTIVE">
            <summary> A connection is active. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_CONNECTION_NOT_ACTIVE">
            <summary> A connection is not active. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_CONNECTION_UNABLE_CREATE_TERMINATE_EVENT">
            <summary> Unable to create communication termination event
              object. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_CONNECTION_UNABLE_CREATE_CONNECTION_COMPLETE_EVENT">
            <summary> Unable to create connection complete event object. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_CONNECTION_UNABLE_START_COMMUNICATION">
            <summary> Unable to create communication thread. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_CONNECTION_TERMINATED">
            <summary> The connection has been terminated by unknown reason. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_CONNECTION_TERMINATED_BY_USER">
            <summary> The connection has been terminated by user. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_CONNECTION_UNABLE_CREATE_INIT_EVENT">
            <summary> Unable to create a communication thread initialization
              event. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_CONNECTION_CLOSED">
            <summary> The connection has been closed. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_CONNECTION_UNEXPECTED">
            <summary> Unexpected error. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_CONNECTION_UNABLE_CREATE_OR_INIT_CLIENT">
            <summary> A server was not able to create or init client connection
              instance. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_CONNECTION_UNABLE_FIND_CLIENT_CLASS">
            <summary> A server was not able to find a specific client connection
              class. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_BASE">
            <summary> The base error code for OBEX errors. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_NOT_CONNECTED">
            <summary> An OBEX client is not connected to an OBEX server. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_CONNECTED">
            <summary> An OBEX client is already connected to an OBEX
              server. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_OPERATION_IN_PROGRESS">
            <summary> An OBEX operation is in progress. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_CONTINUE">
            <summary> The server has received the request headers and the client
              should proceed to send the request body (in the case of a request for
              which a body needs to be sent). </summary>
            <remarks> This result code is not an error and indicates the action
              requested by the client was received, understood and
              accepted. </remarks>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_CREATED">
            <summary> The request has been fulfilled, resulting in the creation of a
              new resource. </summary>
            <remarks> This result code is not an error and indicates the action
              requested by the client was received, understood and
              accepted. </remarks>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_ACCEPTED">
            <summary> The request has been accepted for processing, but the
              processing has not been completed. The request might or might not be
              eventually acted upon, and may be disallowed when processing
              occurs. </summary>
            <remarks> This result code is not an error and indicates the action
              requested by the client was received, understood and
              accepted. </remarks>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_NON_AUTHORITATIVE">
            <summary> The server is a transforming proxy that received a
              <c>WCL_E_SUCCESS</c> from its origin, but is returning a modified
              version of the origin's response. </summary>
            <remarks> This result code is not an error and indicates the action
              requested by the client was received, understood and
              accepted. </remarks>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_NO_CONTENT">
            <summary> The server successfully processed the request and is not
              returning any content. </summary>
            <remarks> This result code is not an error and indicates the action
              requested by the client was received, understood and
              accepted. </remarks>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_RESET_CONTENT">
            <summary> The server successfully processed the request, but is not
              returning any content. Unlike a <c>WCL_E_OBEX_NO_CONTENT</c> error,
              this error requires that the requester reset the object. </summary>
            <remarks> This result code is not an error and indicates the action
              requested by the client was received, understood and
              accepted. </remarks>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_PARTIAL_CONTENT">
            <summary> The server is delivering only part of the resource due to a
              range header sent by the client. The range header is used by OBEX
              clients to enable resuming of interrupted downloads, or split a
              download into multiple simultaneous streams. </summary>
            <remarks> This result code is not an error and indicates the action
              requested by the client was received, understood and
              accepted. </remarks>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_MULTIPLE_CHOICES">
            <summary> Indicates multiple options for the resource from which the
              client may choose. </summary>
            <remarks> This status code is not an error but indicates the client must
              take additional action to complete the request. </remarks>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_MOVED_PERMANENTLY">
            <summary> This and all future requests should be directed to the given
              URI. </summary>
            <remarks> This status code is not an error but indicates the client must
              take additional action to complete the request. </remarks>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_MOVED_TEMPORARY">
            <summary> The response to the request can be found under another URI
              using the GET method. </summary>
            <remarks> This status code is not an error but indicates the client must
              take additional action to complete the request. </remarks>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_SEE_OTHER">
            <summary> The response to the request can be found under another URI
              using the GET method. </summary>
            <remarks> This status code is not an error but indicates the client must
              take additional action to complete the request. </remarks>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_NOT_MODIFIED">
            <summary> Indicates that the resource has not been modified since the
              version specified by the request headers If-Modified-Since or
              If-None-Match. In such case, there is no need to retransmit the resource
              since the client still has a previously-downloaded copy. </summary>
            <remarks> This status code is not an error but indicates the client must
              take additional action to complete the request. </remarks>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_USE_PROXY">
            <summary> The requested resource is available only through a proxy, the
              address for which is provided in the response. </summary>
            <remarks> This status code is not an error but indicates the client must
              take additional action to complete the request. </remarks>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_BAD_REQUEST">
            <summary> The server cannot or will not process the request due to an
              apparent client error (e.g., malformed request syntax, size too large,
              invalid request message framing, or deceptive request
              routing). </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_UNAUTHORIZED">
            <summary> Similar to <c>WCL_E_OBEX_FORBIDDEN</c>, but specifically for
              use when authentication is required and has failed or has not yet been
              provided. The response must include a WWW-Authenticate header field
              containing a challenge applicable to the requested resource. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_PAYMENT_REQUIRED">
            <summary> Reserved for future use. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_FORBIDDEN">
            <summary> The request was valid, but the server is refusing action. The
              user might not have the necessary permissions for a resource, or may
              need an account of some sort. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_NOT_FOUND">
            <summary> The requested resource could not be found but may be available
              in the future. Subsequent requests by the client are
              permissible. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_METHOD_NOT_ALLOWED">
            <summary> A request method is not supported for the requested
              resource. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_NOT_ACCEPTABLE">
            <summary> The requested resource is capable of generating only content not
              acceptable according to the Accept headers sent in the
              request. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_PROXY_AUTH_REQUIRED">
            <summary> The client must first authenticate itself with the
              proxy. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_REQUEST_TIMEOUT">
            <summary> The server timed out waiting for the request. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_CONFLICT">
            <summary> Indicates that the request could not be processed because of
              conflict in the request, such as an edit conflict between multiple
              simultaneous updates. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_GONE">
            <summary> Indicates that the resource requested is no longer available and
              will not be available again. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_LENGTH_REQUIRED">
            <summary> The request did not specify the length of its content, which is
              required by the requested resource. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_PRECONDITION_FAILED">
            <summary> The server does not meet one of the preconditions that the
              requester put on the request. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_REQUEST_TOO_LARGE">
            <summary> The request is larger than the server is willing or able to
              process. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_URL_TOO_LARGE">
            <summary> The URI provided was too long for the server to
              process. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_UNSUPPORTED_MEDIA_TYPE">
            <summary> The request entity has a media type which the server or resource
              does not support. For example, the client uploads an image as
              image/svg+xml, but the server requires that images use a different
              format. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_INTERNAL">
            <summary> A generic error, given when an unexpected condition was
              encountered and no more specific message is suitable. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_NOT_IMPLEMENTED">
            <summary> The server either does not recognize the request method, or it
              lacks the ability to fulfill the request. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_BAD_GATEWAY">
            <summary> The server was acting as a gateway or proxy and received an
              invalid response from the upstream server. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_SERVICE_UNAVAILABLE">
            <summary> The server is currently unavailable (because it is overloaded or
              down for maintenance). Generally, this is a temporary state.
             Also this error indicates that wrong Connect ID or Target
              used. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_GATEWAY_TIMEOUT">
            <summary> The server was acting as a gateway or proxy and did not receive
              a timely response from the upstream server. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_HTTP_VERSION_NOT_SUPPORTED">
            <summary> The server does not support the HTTP protocol version used in
              the request.[ </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_DATABASE_FULL">
            <summary> Indicates that the client requests that something be placed into
              a database but the database is full (cannot take more data). </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_DATABASE_LOCKED">
            <summary> Returned when the client wishes to access a database, database
              table, or database record that has been locked. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_OPERATION_TERMINATED_BY_DISCONNECT">
            <summary> The current operation has been terminated because a remote
              device is disconnected. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_OPERATION_TERMINATED_BY_USER">
            <summary> The current operation has been terminated by a user. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_INVALID_OPERATION_SEQUENCE">
            <summary> The operation can not be executed at this time. This error
              appears if for example an application calls Terminate for Connect,
              Disconnect or SetPath operations. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_DISCONNECTED">
            <summary> The error code indicates that the OBEX session has been
              disconnected by a remote side. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_UNEXPECTED">
            <summary> Unexpected or unknown OBEX result code. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_CREATE_CONNECTION_ID_MUTEX_FAILED">
            <summary> Unable to create synchronization Mutex used to generate
              connection ID. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_MAX_CONNECTION_ID">
            <summary> The maximum connection ID has been reached. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_INVALID_STATE">
            <summary> Invalid data processor state. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_INVALID_DIR_LIST">
            <summary> Unable to parse directory listing. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_INVALID_DIR_FORMAT">
            <summary> Wrong directory listing format. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_COM_INIT_FAILED">
            <summary> COM initialization failed. </summary>
        </member>
        <member name="F:wclCommunication.wclConnectionErrors.WCL_E_OBEX_XML_NOT_AVAILABLE">
            <summary> XML parser is not available. </summary>
        </member>
        <member name="T:wclCommunication.wclEConnection">
            <summary> The base class for connections exceptions. </summary>
            <seealso cref="T:wclCommon.wclException" />
        </member>
        <member name="M:wclCommunication.wclEConnection.#ctor(System.String)">
            <summary> Initializes a new instance of the exception class with a specified error message. </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:wclCommunication.wclEClientConnection">
            <summary> Exception class used for client connections. </summary>
            <seealso cref="T:wclCommunication.wclEConnection" />
        </member>
        <member name="M:wclCommunication.wclEClientConnection.#ctor(System.String)">
            <summary> Initializes a new instance of the exception class with a specified error message. </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:wclCommunication.wclEClientActive">
            <summary> The exception raises when an application tries to change
              any property of already active (connecting or connected) client
              component. </summary>
            <seealso cref="T:wclCommunication.wclEClientConnection" />
        </member>
        <member name="M:wclCommunication.wclEClientActive.#ctor(System.String)">
            <summary> Initializes a new instance of the exception class with a specified error message. </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:wclCommunication.wclEServerConnection">
            <summary> Exception class used for server connections. </summary>
            <seealso cref="T:wclCommunication.wclEConnection" />
        </member>
        <member name="M:wclCommunication.wclEServerConnection.#ctor(System.String)">
            <summary> Initializes a new instance of the exception class with a specified error message. </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:wclCommunication.wclEServerActive">
            <summary> The exception raises when an application tries to change
              any property of already active (listening) server component. </summary>
            <seealso cref="T:wclCommunication.wclEServerConnection" />
        </member>
        <member name="M:wclCommunication.wclEServerActive.#ctor(System.String)">
            <summary> Initializes a new instance of the exception class with a specified error message. </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:wclCommunication.wclEServerClientConnection">
            <summary> Exception class used for server client connections. </summary>
            <seealso cref="T:wclCommunication.wclEServerConnection" />
        </member>
        <member name="M:wclCommunication.wclEServerClientConnection.#ctor(System.String)">
            <summary> Initializes a new instance of the exception class with a specified error message. </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:wclCommunication.wclCustomConnection">
            <summary> The base class for all WCL connections. </summary>
            <remarks> A connection implements a hardware-dependent methods
             to communicate with a remote devices: IrDA, Classic Bluetooth, BLE,
             Serial etc. </remarks>
        </member>
        <member name="M:wclCommunication.wclCustomConnection.MessageReceived(wclCommon.wclMessage)">
            <summary> The message receiver calls this method when a new notification
              message has been received. </summary>
            <param name="Message"> A <see cref="T:wclCommon.wclMessage" /> object
              represents the notification message. </param>
            <remarks> <para> This method is for internal use only. </para>
              <para> If a derived class overrides this method it must always call
              the inherited implementation first. </para> </remarks>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclCommunication.wclCustomConnection.Enter">
            <summary> Enters the connection's critical section. </summary>
            <remarks> The method should be used to protect connection in
              multi-threaded applications. </remarks>
        </member>
        <member name="M:wclCommunication.wclCustomConnection.Leave">
            <summary> Exists *leaves) the connection's critical section. </summary>
            <remarks> The method should be used to protect connection in
              multi-threaded applications. </remarks>
        </member>
        <member name="M:wclCommunication.wclCustomConnection.#ctor">
            <summary> Creates a new connection. </summary>
        </member>
        <member name="P:wclCommunication.wclCustomConnection.Receiver">
            <summary> Gets the connection message receiver object. </summary>
            <value> The internal message receiver object. </value>
            <seealso cref="T:wclCommon.wclMessageReceiver" />
        </member>
        <member name="P:wclCommunication.wclCustomConnection.ThreadId">
            <summary> Gets the connection's thread ID. </summary>
            <value> The thread ID. </value>
            <remarks> The connection's thread ID is the ID of the thread that
              created and used to handle the connection. </remarks>
        </member>
        <member name="T:wclCommunication.wclClientState">
            <summary> The client connection states. </summary>
        </member>
        <member name="F:wclCommunication.wclClientState.csDisconnected">
            <summary> A client is disconnected. </summary>
        </member>
        <member name="F:wclCommunication.wclClientState.csPreparing">
            <summary> A client is preparing for connection. </summary>
        </member>
        <member name="F:wclCommunication.wclClientState.csConnecting">
            <summary> A client is connecting to a remote device. </summary>
        </member>
        <member name="F:wclCommunication.wclClientState.csConnected">
            <summary> A client is connected to a remote device. </summary>
        </member>
        <member name="F:wclCommunication.wclClientState.csDisconnecting">
            <summary> A client is disconnecting from a remote device. </summary>
        </member>
        <member name="T:wclCommunication.wclClientConnectionConnectEvent">
            <summary> The prototype of the <c>OnConnect</c> event handler for client
              connections. </summary>
            <param name="Sender"> The object that initiated the event. </param>
            <param name="Error"> The connection operation result code. If the
              parameter is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> the connection to a remote
              device was established and the remote device is connected. Otherwise
              the connection was not established and the remote device is
              not connected. </param>
        </member>
        <member name="T:wclCommunication.wclClientConnectionDisconnectEvent">
            <summary> The prototype of the <c>OnDisconnect</c> event handler for
              client connections. </summary>
            <param name="Sender"> The object that initiated the event. </param>
            <param name="Reason"> The disconnection code. If the
              parameter is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> the connection was closed
              by the <c>Disconnect</c> call. Otherwise indicates the disconnection
              reason. </param>
        </member>
        <member name="T:wclCommunication.wclClientConnection">
            <summary> The base class for all client oriented connections. </summary>
            <remarks> The class provides the basic methods for client
              connections. </remarks>
            <seealso cref="T:wclCommunication.wclCustomConnection" />
        </member>
        <member name="M:wclCommunication.wclClientConnection.InternalDisconnect(System.Int32)">
            <summary> The internal disconnect method. Disconnects from a
              connected remote device. </summary>
            <param name="Reason"> The disconnection reason code. If the
              method has been called by the <c>Disconnect</c> method the
              reason is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> </param>
        </member>
        <member name="M:wclCommunication.wclClientConnection.NotifyClosed(System.Int32)">
            <summary> Send a Disconnect notification message. </summary>
            <param name="Reason"> The disconnection code. If the
              parameter is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> the connection was closed
              by the <c>Disconnect</c> call. Otherwise indicates the disconnection
              reason. </param>
        </member>
        <member name="M:wclCommunication.wclClientConnection.MessageReceived(wclCommon.wclMessage)">
            <summary> The message receiver calls this method when a new notification
              message has been received. </summary>
            <param name="Message"> A <see cref="T:wclCommon.wclMessage" /> object
              represents the notification message. </param>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclCommunication.wclClientConnection.DoConnect(System.Int32)">
            <summary> Fires the <c>OnConnect</c> event. </summary>
            <param name="Error"> The connection operation result code. If the
              parameter is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> the connection to a remote
              device was established and the remote device is connected. Otherwise
              the connection was not established and the remote device is
              not connected. </param>
        </member>
        <member name="M:wclCommunication.wclClientConnection.DoDisconnect(System.Int32)">
            <summary> Fires the <c>OnDisconnect</c> event. </summary>
            <param name="Reason"> The disconnection code. If the
              parameter is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> the connection was closed
              by the <c>Disconnect</c> call. Otherwise indicates the disconnection
              reason. </param>
        </member>
        <member name="M:wclCommunication.wclClientConnection.HalCommunicate(System.IntPtr)">
            <summary> Implements a hardware-dependent code that communicate with the
              connected remote device. </summary>
            <param name="Event"> The system even object handle (disconnect
              event). </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> Derived classes must override this method to implement
              a hardware-dependent code that exchanges data with a remote
              device. </para>
              <para> The method executes in a separate thread. </para>
              <para> The method implementation must monitor the <c>Event</c>
              parameter. The <c>Event</c> parameter is set if the
              <c>Disconnect</c> method was called and the method must terminate
              communication and exit. </para>
              <para> The default implementation simple waits for the <c>Event</c>
              and exists when the events signaled. </para> </remarks>
        </member>
        <member name="M:wclCommunication.wclClientConnection.HalConnect(System.IntPtr)">
            <summary> Implements a hardware-dependent code that connects to a
              remote device. </summary>
            <param name="Event"> The system even object handle. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> Derived classes must override this method to implement
              a hardware-dependent code that connects to a remote device. </para>
              <para> The method executes in a separate thread. </para>
              <para> The method implementation must monitor the <c>Event</c>
              parameter. The <c>Event</c> parameter is set if the
              <c>Disconnect</c> method was called. If the termination event was set
              the method must terminate connection operation. </para>
              <para> If connection to a remote device was terminated the method
              must release all allocated resources because the <c>HalDisconnect</c>
              will not be called. </para> </remarks>
        </member>
        <member name="M:wclCommunication.wclClientConnection.HalDisconnect">
            <summary> Implements a hardware-dependent code that disconnects from the
              connected remote device. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> The method is called only if a connection to a remote
              device was established with success (the <c>Connect</c> method was
              success). </para>
              <para> The method will not be called if the connection to the  remote
              device was terminated in the middle of the <c>HalConnect</c>
              method. </para> </remarks>
        </member>
        <member name="M:wclCommunication.wclClientConnection.#ctor">
            <summary> Creates a new client connection. </summary>
        </member>
        <member name="M:wclCommunication.wclClientConnection.Finalize">
            <summary> Frees the connection. </summary>
        </member>
        <member name="M:wclCommunication.wclClientConnection.Connect(System.UInt32)">
            <summary> Connects to a remote device. </summary>
            <param name="Timeout"> The connect timeout in milliseconds. The
              default value is 10000 milliseconds. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> The method starts a connection operation to a remote device.
              If the method success that does not mean that the connection was
              established. That just means that the connection operation was
              started. The real connection result will be passed to the
              <c>OnConnect</c> event handler. </remarks>
        </member>
        <member name="M:wclCommunication.wclClientConnection.Disconnect">
            <summary> Disconnects from the connected remote device. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> The method disconnects from the connected remote device or
              terminates the pending connection. </remarks>
        </member>
        <member name="P:wclCommunication.wclClientConnection.State">
            <summary> Gets the connection state. </summary>
            <value> The <see cref="T:wclCommunication.wclClientState" /> indicates the current
              connection state. </value>
            <seealso cref="T:wclCommunication.wclClientState" />
        </member>
        <member name="P:wclCommunication.wclClientConnection.Timeout">
            <summary> Gets the connect timeout value. </summary>
            <value> The connect timeout value in milliseconds. </value>
        </member>
        <member name="E:wclCommunication.wclClientConnection.OnConnect">
            <summary> The event fires when a connection to a remote device
              has been completed (with or without success). </summary>
            <remarks> If the <c>Error</c> parameter of the event is not
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> an application may call <c>Connect</c>
              method again from inside the event handler. </remarks>
            <seealso cref="T:wclCommunication.wclClientConnectionConnectEvent" />
        </member>
        <member name="E:wclCommunication.wclClientConnection.OnDisconnect">
            <summary> The event fires when the remote connected device has been
              disconnected. </summary>
            <seealso cref="T:wclCommunication.wclClientConnectionDisconnectEvent" />
        </member>
        <member name="T:wclCommunication.wclConnectionDataEvent">
            <summary> The <c>OnData</c> event handler prototype. </summary>
            <param name="Sender"> The object that initiated the event. </param>
            <param name="Data"> The pointer to the received data buffer.
              It is guaranteed that the parameter points to a valid data buffer.
              The data buffer is valid only inside the event handler. If an
              application needs to use the data outside the event handle it must
              allocate own buffer and copy data into it. </param>
        </member>
        <member name="T:wclCommunication.wclClientDataConnection">
            <summary> The base class for the client connection that requires data
              exchange with a remote device. </summary>
            <seealso cref="T:wclCommunication.wclClientConnection" />
        </member>
        <member name="M:wclCommunication.wclClientDataConnection.NotifyDataReceived(System.Byte[])">
            <summary> Send a data notification message. </summary>
            <param name="Data"> The data buffer contains received data. </param>
        </member>
        <member name="M:wclCommunication.wclClientDataConnection.MessageReceived(wclCommon.wclMessage)">
            <summary> The message receiver calls this method when a new notification
              message has been received. </summary>
            <param name="Message"> A <see cref="T:wclCommon.wclMessage" /> object
              represents the notification message. </param>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclCommunication.wclClientDataConnection.DoData(System.Byte[])">
            <summary> Fires the <c>OnData</c> event. </summary>
            <param name="Data"> The pointer to the received data buffer.
              It is guaranteed that the parameter points to a valid data buffer.
              The data buffer is valid only inside the event handler. If an
              application needs to use the data outside the event handle it must
              allocate own buffer and copy data into it. </param>
        </member>
        <member name="M:wclCommunication.wclClientDataConnection.HalGetReadBufferSize(System.UInt32@)">
            <summary> Reads the read buffer size. </summary>
            <param name="Size"> On output he read buffer size in bytes. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to implement the
             buffer size reading code. </remarks>
        </member>
        <member name="M:wclCommunication.wclClientDataConnection.HalGetWriteBufferSize(System.UInt32@)">
            <summary> Reads the write buffer size. </summary>
            <param name="Size"> On output the write buffer size in bytes. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to implement the
             buffer size reading code. </remarks>
        </member>
        <member name="M:wclCommunication.wclClientDataConnection.HalSetReadBufferSize(System.UInt32)">
            <summary> Sets the read buffer size. </summary>
            <param name="Size"> The new read buffer size in bytes. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to implement the
             buffer size setting code. </remarks>
        </member>
        <member name="M:wclCommunication.wclClientDataConnection.HalSetWriteBufferSize(System.UInt32)">
            <summary> Sets the write buffer size. </summary>
            <param name="Size"> The new write buffer size in bytes. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to implement the
             buffer size setting code. </remarks>
        </member>
        <member name="M:wclCommunication.wclClientDataConnection.HalWrite(System.Byte[],System.UInt32@)">
            <summary> Implements a hardware-dependent code that sends data to the
              connected device. </summary>
            <param name="Data"> The pointer to the data buffer that should be sent
              to the connected device. </param>
            <param name="Written"> The amount of bytes actually written to the
              device. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to implement a
              hardware-dependent code that sends data to the connected device.
              The method executes in the main thread and must be
              synchronous. </remarks>
        </member>
        <member name="M:wclCommunication.wclClientDataConnection.#ctor">
            <summary> Creates a new client data connection. </summary>
        </member>
        <member name="M:wclCommunication.wclClientDataConnection.GetReadBufferSize(System.UInt32@)">
            <summary> Reads the read buffer size. </summary>
            <param name="Size"> On output he read buffer size in bytes. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclCommunication.wclClientDataConnection.GetWriteBufferSize(System.UInt32@)">
            <summary> Reads the write buffer size. </summary>
            <param name="Size"> On output the write buffer size in bytes. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclCommunication.wclClientDataConnection.SetReadBufferSize(System.UInt32)">
            <summary> Sets the read buffer size. </summary>
            <param name="Size"> The new read buffer size in bytes. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclCommunication.wclClientDataConnection.SetWriteBufferSize(System.UInt32)">
            <summary> Sets the write buffer size. </summary>
            <param name="Size"> The new write buffer size in bytes. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclCommunication.wclClientDataConnection.Write(System.Byte[],System.UInt32@)">
            <summary> Sends data to the connected device. </summary>
            <param name="Data"> The pointer to the data buffer that should be sent
              to the connected device. </param>
            <param name="Written"> The amount of bytes actually written to the
              device. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> The write is synchronous operation. </remarks>
        </member>
        <member name="P:wclCommunication.wclClientDataConnection.Processor">
            <summary> Gets the current Data Processor object assigned to the
              Connection. </summary>
            <value> The <see cref="T:wclCommunication.wclCustomClientDataProcessor" /> object
              used by the Connection to process data. </value>
            <seealso cref="T:wclCommunication.wclCustomClientDataProcessor" />
        </member>
        <member name="E:wclCommunication.wclClientDataConnection.OnData">
            <summary> The event fires when new data is received from the
              connected remote device. </summary>
            <seealso cref="T:wclCommunication.wclConnectionDataEvent" />
        </member>
        <member name="T:wclCommunication.wclServerClientConnection">
            <summary> The base class for all server client connection. </summary>
            <remarks> The class provides the basic methods for server
              connections. </remarks>
            <seealso cref="T:wclCommunication.wclCustomConnection" />
        </member>
        <member name="M:wclCommunication.wclServerClientConnection.NotifyClosed(System.Int32)">
            <summary> Send a Disconnect notification message. </summary>
            <param name="Reason"> The disconnection code. If the
              parameter is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> the connection was closed
              by the <c>Disconnect</c> call. Otherwise indicates the disconnection
              reason. </param>
        </member>
        <member name="M:wclCommunication.wclServerClientConnection.MessageReceived(wclCommon.wclMessage)">
            <summary> The message receiver calls this method when a new notification
              message has been received. </summary>
            <param name="Message"> A <see cref="T:wclCommon.wclMessage" /> object
              represents the notification message. </param>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclCommunication.wclServerClientConnection.DoConnect(System.Int32)">
            <summary> Fires the <c>OnConnect</c> event. </summary>
            <param name="Error"> The connection operation result code. If the
              parameter is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> the connection to a remote
              device was established and the remote device is connected. Otherwise
              the connection was not established and the remote device is
              not connected. </param>
        </member>
        <member name="M:wclCommunication.wclServerClientConnection.DoDisconnect(System.Int32)">
            <summary> Fires the <c>OnDisconnect</c> event. </summary>
            <param name="Reason"> The disconnection code. If the
              parameter is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> the connection was closed
              by the <c>Disconnect</c> call. Otherwise indicates the disconnection
              reason. </param>
        </member>
        <member name="M:wclCommunication.wclServerClientConnection.Accept(wclCommunication.wclServerConnection,System.Object)">
            <summary> The method accepts the client connection request. </summary>
            <param name="Server"> A <see cref="T:wclCommunication.wclServerConnection" />
              object owns the client connection. </param>
            <param name="Params"> An optional pointer to the hardware-dependent
              data contains information about client connection request. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> The method called by the server when connection from a
              remote client device has already been accepted. </para>
              <para> The method is always called from the main (or from the same)
              thread that runs the server. </para>
              <para> The method prepares the class for comunication with a remote
              client. </para>
              <para> If the method fails it disconnects already accepted client
              connection. </para> </remarks>
            <seealso cref="T:wclCommunication.wclServerConnection" />
        </member>
        <member name="M:wclCommunication.wclServerClientConnection.HalAccept">
            <summary> Hardware-dependent method that prepares to communicate
              with a connected remote client device. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide a
              hardware-dependent code that prepares the class to communicate
              with a remote connected device. </remarks>
        </member>
        <member name="M:wclCommunication.wclServerClientConnection.HalCommunicate(System.IntPtr)">
            <summary> Implements a hardware-dependent code that communicate with the
              connected remote device. </summary>
            <param name="Event"> The system even object handle (disconnect
              event). </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> Derived classes must override this method to implement
              a hardware-dependent code that exchanges data with a remote
              device. </para>
              <para> The method executes in a separate thread. </para>
              <para> The method implementation must monitor the <c>Event</c>
              parameter. The <c>Event</c> parameter is set if the
              <c>Disconnect</c> method was called and the method must terminate
              communication and exit. </para>
              <para> The default implementation simple waits for the <c>Event</c>
              and exists when the events signaled. </para> </remarks>
        </member>
        <member name="M:wclCommunication.wclServerClientConnection.HalDisconnect">
            <summary> Implements a hardware-dependent code that disconnects from the
              connected remote device. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide a
              hardware-dependent code that disconnects from a remote connected
              device. </remarks>
        </member>
        <member name="P:wclCommunication.wclServerClientConnection.Disconnected">
            <summary> Gets the connection state. </summary>
            <value> <c>True</c> if the connection is disconnected. </value>
        </member>
        <member name="P:wclCommunication.wclServerClientConnection.Params">
            <summary> Custom connection parameters. </summary>
            <value> The pointer to the custom connection parameters. </value>
            <remarks> The parameters passed from the
              <see cref="T:wclCommunication.wclServerConnection" /> object and contains
              hardware-dependent data about accepted client connections. </remarks>
        </member>
        <member name="M:wclCommunication.wclServerClientConnection.#ctor">
            <summary> Creates a new server client connection. </summary>
        </member>
        <member name="M:wclCommunication.wclServerClientConnection.Finalize">
            <summary> Frees the connection. </summary>
        </member>
        <member name="M:wclCommunication.wclServerClientConnection.Disconnect">
            <summary> Disconnects from the connected remote device. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> The method disconnects from the connected remote
              device. </para>
              <para> The method also frees the object. After calling this method an
              application must not use the object. </para> </remarks>
        </member>
        <member name="P:wclCommunication.wclServerClientConnection.Server">
            <summary> Gets the client owner. </summary>
            <value> The <see cref="T:wclCommunication.wclServerConnection" /> object
              that owns the connection. </value>
            <seealso cref="T:wclCommunication.wclServerConnection" />
        </member>
        <member name="E:wclCommunication.wclServerClientConnection.OnConnect">
            <summary> The event fires when a connection for a remote device
              has been accepted. </summary>
            <seealso cref="T:wclCommunication.wclClientConnectionConnectEvent" />
        </member>
        <member name="E:wclCommunication.wclServerClientConnection.OnDisconnect">
            <summary> The event fires when the remote connected device has been
              disconnected. </summary>
            <seealso cref="T:wclCommunication.wclClientConnectionDisconnectEvent"/>
        </member>
        <member name="T:wclCommunication.wclServerState">
            <summary> The server connections states. </summary>
        </member>
        <member name="F:wclCommunication.wclServerState.ssClosed">
            <summary> A server is closed. </summary>
        </member>
        <member name="F:wclCommunication.wclServerState.ssPreparing">
            <summary> A server is preparing for connection. </summary>
        </member>
        <member name="F:wclCommunication.wclServerState.ssListening">
            <summary> A server is listening. </summary>
        </member>
        <member name="F:wclCommunication.wclServerState.ssClosing">
            <summary> A server is closing. </summary>
        </member>
        <member name="T:wclCommunication.wclServerConnectionConnectEvent">
            <summary> The prototype of the <c>OnConnect</c> event handler for server
              connection. </summary>
            <param name="Sender"> The object that initiated the event. </param>
            <param name="Client"> The
              <see cref="T:wclCommunication.wclServerClientConnection" /> represents a remote
              connected client. </param>
            <param name="Error"> The connection operation result code. If the
              parameter is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> the connection to a remote
              device was established and the remote device is connected. Otherwise
              the connection was not established and the remote device is
              not connected. </param>
            <seealso cref="T:wclCommunication.wclServerClientConnection" />
        </member>
        <member name="T:wclCommunication.wclServerConnectionDisconnectEvent">
            <summary> The prototype of the <c>OnDisconnect</c> event handler for
              server connections. </summary>
            <param name="Sender"> The object that initiated the event. </param>
            <param name="Client"> The
              <see cref="T:wclCommunication.wclServerClientConnection" /> represents a remote
              connected client. </param>
            <param name="Reason"> The disconnection code. If the
              parameter is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> the connection was closed
              by the <c>Disconnect</c> call. Otherwise indicates the disconnection
              reason. </param>
            <seealso cref="T:wclCommunication.wclServerClientConnection" />
        </member>
        <member name="T:wclCommunication.wclServerConnection">
            <summary> The base class for all server connections. </summary>
            <remarks> An application must never create this class directly.
              Instead of that an application must use high-level
              components. </remarks>
            <seealso cref="T:wclCommunication.wclCustomConnection" />
        </member>
        <member name="M:wclCommunication.wclServerConnection.InternalClose(System.Int32)">
            <summary> Closes the server. </summary>
            <param name="Reason"> The close reason code. If the server closed by
              the <c>Close</c> method call the <c>Reason</c> is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> </param>
        </member>
        <member name="M:wclCommunication.wclServerConnection.CreateNewClientConnection(System.Object)">
            <summary> Sends a notification to the main thread to create and init
              new client connection. </summary>
            <param name="Params"> An optional pointer to the hardware-dependent
              data contains information about client connection request. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> The <c>HalListen</c> method shoudl call this method to
              create and initialize new client connection. </remarks>
        </member>
        <member name="M:wclCommunication.wclServerConnection.MessageReceived(wclCommon.wclMessage)">
            <summary> The message receiver calls this method when a new notification
              message has been received. </summary>
            <param name="Message"> A <see cref="T:wclCommon.wclMessage" /> object
              represents the notification message. </param>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclCommunication.wclServerConnection.DoClosed(System.Int32)">
            <summary> Fires the <c>OnClosed</c> event. </summary>
            /// <param name="Reason"> The close reason code. If the server closed by
              the <c>Close</c> method call the <c>Reason</c> is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> </param>
        </member>
        <member name="M:wclCommunication.wclServerConnection.DoConnect(wclCommunication.wclServerClientConnection,System.Int32)">
            <summary> Fires the <c>OnConnect</c> event. </summary>
            <param name="Client"> The
              <see cref="T:wclCommunication.wclServerClientConnection" /> represents a remote
              connected client. </param>
            <param name="Error"> The connection operation result code. If the
              parameter is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> the connection to a remote
              device was established and the remote device is connected. Otherwise
              the connection was not established and the remote device is
              not connected. </param>
            <seealso cref="T:wclCommunication.wclServerClientConnection" />
        </member>
        <member name="M:wclCommunication.wclServerConnection.DoDisconnect(wclCommunication.wclServerClientConnection,System.Int32)">
            <summary> Fires the <c>OnDisconnect</c> event. </summary>
            <param name="Client"> The
              <see cref="T:wclCommunication.wclServerClientConnection" /> represents a remote
              connected client. </param>
            <param name="Reason"> The disconnection code. If the
              parameter is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> the connection was closed
              by the <c>Disconnect</c> call. Otherwise indicates the disconnection
              reason. </param>
            <seealso cref="T:wclCommunication.wclServerClientConnection" />
        </member>
        <member name="M:wclCommunication.wclServerConnection.DoListen">
            <summary> Fires the <c>OnListen</c> event. </summary>
        </member>
        <member name="M:wclCommunication.wclServerConnection.SetClientEvents(wclCommunication.wclServerClientConnection)">
            <summary> The method sets the client's event handlers. </summary>
            <param name="Client"> The
              <see cref="T:wclCommunication.wclServerClientConnection" /> represents a client
              connection. </param>
            <seealso cref="T:wclCommunication.wclServerClientConnection" />
        </member>
        <member name="M:wclCommunication.wclServerConnection.HalListen(System.IntPtr)">
            <summary> Implements a hardware-dependent method for listening the client
              connections. </summary>
            <param name="Event"> The termination event handle. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to implement
              a hardware-dependent code for listening for incomming
              connections. </remarks>
        </member>
        <member name="M:wclCommunication.wclServerConnection.HalClose">
            <summary> Implements a hardware-dependent method to stop
              listening. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> The method is called only if the <c>HalListen</c> was
              success. </remarks>
        </member>
        <member name="M:wclCommunication.wclServerConnection.HalCreateClient">
            <summary> The method crteates a hardware and transport-dependent
              client connection. </summary>
            <returns> If the method success the return value is the object
              represents the client connection. Otherwise the method returns
              <c>null</c>. </returns>
            <remarks> A derived class must override this method to create a
              custom HAL server client connection. </remarks>
            <seealso cref="T:wclCommunication.wclServerClientConnection" />
        </member>
        <member name="M:wclCommunication.wclServerConnection.HalPrepare">
            <summary> Implements a hardware-dependent code that prepares for
              listening. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override thi smethod to implement a
              hardware-dependent code that prepares the server connection. </remarks>
        </member>
        <member name="M:wclCommunication.wclServerConnection.#ctor">
            <summary> Creates a new server connection. </summary>
        </member>
        <member name="M:wclCommunication.wclServerConnection.Finalize">
            <summary> Frees the server connection. </summary>
        </member>
        <member name="M:wclCommunication.wclServerConnection.Close">
            <summary> The method disconnects all connected clients and closes the
              server. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> The method must be called from the same thread that called
              the <c>Listen</c> method. The method is not thread-safe. </remarks>
        </member>
        <member name="M:wclCommunication.wclServerConnection.Listen">
            <summary> The method starts listening for client connections. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="P:wclCommunication.wclServerConnection.Item(System.Int32)">
            <summary> Gets a connected client by its index. </summary>
            <value> The connected client. </value>
            <seealso cref="T:wclCommunication.wclServerClientConnection" />
        </member>
        <member name="P:wclCommunication.wclServerConnection.ClientsCount">
            <summary> Gets the number of connected clients. </summary>
            <value> The number of the connected clients. </value>
        </member>
        <member name="P:wclCommunication.wclServerConnection.State">
            <summary> Gets the connection state. </summary>
            <value> The <see cref="T:wclCommunication.wclServerState" /> indicates the current
              connection state. </value>
            <seealso cref="T:wclCommunication.wclServerState" />
        </member>
        <member name="E:wclCommunication.wclServerConnection.OnClosed">
            <summary> The event fires when the server is closed. </summary>
            <seealso cref="T:wclCommunication.wclClientConnectionDisconnectEvent" /> 
        </member>
        <member name="E:wclCommunication.wclServerConnection.OnConnect">
            <summary> The event fires when a remote client is connected to
              the server. </summary>
            <seealso cref="T:wclCommunication.wclServerConnectionConnectEvent" />
        </member>
        <member name="E:wclCommunication.wclServerConnection.OnDisconnect">
            <summary> The event fires when a remote client has disconnected from the
              server. </summary>
            <seealso cref="T:wclCommunication.wclServerConnectionDisconnectEvent" />
        </member>
        <member name="E:wclCommunication.wclServerConnection.OnListen">
            <summary> The event fires when the serve ris ready to accept incomming
              connections (is in listening state). </summary>
        </member>
        <member name="T:wclCommunication.wclServerClientDataConnection">
            <summary> The base class for the server client connection that
              requires data exchange with a remote device. </summary>
            <seealso cref="T:wclCommunication.wclServerClientConnection" />
        </member>
        <member name="M:wclCommunication.wclServerClientDataConnection.NotifyDataReceived(System.Byte[])">
            <summary> Send a data notification message. </summary>
            <param name="Data"> The data buffer contains received data. </param>
        </member>
        <member name="M:wclCommunication.wclServerClientDataConnection.MessageReceived(wclCommon.wclMessage)">
            <summary> The message receiver calls this method when a new notification
              message has been received. </summary>
            <param name="Message"> A <see cref="T:wclCommon.wclMessage" /> object
              represents the notification message. </param>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclCommunication.wclServerClientDataConnection.Accept(wclCommunication.wclServerConnection,System.Object)">
            <summary> The method accepts the client connection request. </summary>
            <param name="Server"> A <see cref="T:wclCommunication.wclServerConnection" />
              object owns the client connection. </param>
            <param name="Params"> An optional pointer to the hardware-dependent
              data contains information about client connection request. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> The method called by the server when connection from a
              remote client device has already been accepted. </para>
              <para> The method is always called from the main (or from the same)
              thread that runs the server. </para>
              <para> The method prepares the class for comunication with a remote
              client. </para>
              <para> If the method fails it disconnects already accepted client
              connection. </para>
              <para> The <c>Server</c> parametr must be a
              <see cref="T:wclCommunication.wclServerDataConnection" />
               object. </para> </remarks>
            <seealso cref="T:wclCommunication.wclServerConnection" />
            <seealso cref="T:wclCommunication.wclServerDataConnection" />
        </member>
        <member name="M:wclCommunication.wclServerClientDataConnection.DoData(System.Byte[])">
            <summary> Fires the <c>OnData</c> event. </summary>
            <param name="Data"> The pointer to the received data buffer.
              It is guaranteed that the parameter points to a valid data buffer.
              The data buffer is valid only inside the event handler. If an
              application needs to use the data outside the event handle it must
              allocate own buffer and copy data into it. </param>
        </member>
        <member name="M:wclCommunication.wclServerClientDataConnection.HalGetReadBufferSize(System.UInt32@)">
            <summary> Reads the read buffer size. </summary>
            <param name="Size"> On output he read buffer size in bytes. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to implement the
             buffer size reading code. </remarks>
        </member>
        <member name="M:wclCommunication.wclServerClientDataConnection.HalGetWriteBufferSize(System.UInt32@)">
            <summary> Reads the write buffer size. </summary>
            <param name="Size"> On output the write buffer size in bytes. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to implement the
             buffer size reading code. </remarks>
        </member>
        <member name="M:wclCommunication.wclServerClientDataConnection.HalSetReadBufferSize(System.UInt32)">
            <summary> Sets the read buffer size. </summary>
            <param name="Size"> The new read buffer size in bytes. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to implement the
             buffer size setting code. </remarks>
        </member>
        <member name="M:wclCommunication.wclServerClientDataConnection.HalSetWriteBufferSize(System.UInt32)">
            <summary> Sets the write buffer size. </summary>
            <param name="Size"> The new write buffer size in bytes. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to implement the
             buffer size setting code. </remarks>
        </member>
        <member name="M:wclCommunication.wclServerClientDataConnection.HalWrite(System.Byte[],System.UInt32@)">
            <summary> Implements a hardware-dependent code that sends data to the
              connected device. </summary>
            <param name="Data"> The pointer to the data buffer that should be sent
              to the connected device. </param>
            <param name="Written"> The amount of bytes actually written to the
              device. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to implement a
              hardware-dependent code that sends data to the connected device.
              The method executes in the main thread and must be
              synchronous. </remarks>
        </member>
        <member name="M:wclCommunication.wclServerClientDataConnection.#ctor">
            <summary> Creates a new serve rclient data connection. </summary>
        </member>
        <member name="M:wclCommunication.wclServerClientDataConnection.GetReadBufferSize(System.UInt32@)">
            <summary> Reads the read buffer size. </summary>
            <param name="Size"> On output he read buffer size in bytes. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclCommunication.wclServerClientDataConnection.GetWriteBufferSize(System.UInt32@)">
            <summary> Reads the write buffer size. </summary>
            <param name="Size"> On output the write buffer size in bytes. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclCommunication.wclServerClientDataConnection.SetReadBufferSize(System.UInt32)">
            <summary> Sets the read buffer size. </summary>
            <param name="Size"> The new read buffer size in bytes. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclCommunication.wclServerClientDataConnection.SetWriteBufferSize(System.UInt32)">
            <summary> Sets the write buffer size. </summary>
            <param name="Size"> The new write buffer size in bytes. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclCommunication.wclServerClientDataConnection.Write(System.Byte[],System.UInt32@)">
            <summary> Sends data to the connected device. </summary>
            <param name="Data"> The pointer to the data buffer that should be sent
              to the connected device. </param>
            <param name="Written"> The amount of bytes actually written to the
              device. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> The write is synchronous operation. </remarks>
        </member>
        <member name="P:wclCommunication.wclServerClientDataConnection.Processor">
            <summary> Gets the current Data Processor object assigned to the
              Connection. </summary>
            <value> The <see cref="T:wclCommunication.wclCustomServerClientDataProcessor" /> object
              used by the Connection to process data. </value>
            <seealso cref="T:wclCommunication.wclCustomServerClientDataProcessor" />
        </member>
        <member name="E:wclCommunication.wclServerClientDataConnection.OnData">
            <summary> The event fires when new data is received from the
              connected remote device. </summary>
            <seealso cref="T:wclCommunication.wclConnectionDataEvent" />
        </member>
        <member name="T:wclCommunication.wclServerConnectionDataEvent">
            <summary> A server connection <c>OnData</c> event handler
              prototype. </summary>
            <param name="Sender"> The object that initiated the event. </param>
            <param name="Client"> A
              <see cref="T:wclCommunication.wclServerClientDataConnection" /> object
              represents a remote client connection. </param>
            <param name="Data"> The pointer to the received data buffer.
              It is guaranteed that the parameter points to a valid data buffer.
              The data buffer is valid only inside the event handler. If an
              application needs to use the data outside the event handle it must
              allocate own buffer and copy data into it. </param>
            <seealso cref="T:wclCommunication.wclServerClientDataConnection" />
        </member>
        <member name="T:wclCommunication.wclServerDataConnection">
            <summary> The base class for the server connection that
              requires data exchange with a remote device. </summary>
            <seealso cref="T:wclCommunication.wclServerConnection" />
        </member>
        <member name="M:wclCommunication.wclServerDataConnection.SetClientEvents(wclCommunication.wclServerClientConnection)">
            <summary> The method sets the client's event handlers. </summary>
            <param name="Client"> The
              <see cref="T:wclCommunication.wclServerClientConnection" /> represents a client
              connection. </param>
            <seealso cref="T:wclCommunication.wclServerClientConnection" />
        </member>
        <member name="M:wclCommunication.wclServerDataConnection.DoData(wclCommunication.wclServerClientDataConnection,System.Byte[])">
            <summary> Fires the <c>OnData</c> event. </summary>
            <param name="Client"> A
              <see cref="T:wclCommunication.wclServerClientDataConnection" /> object
              represents a remote client connection. </param>
            <param name="Data"> The pointer to the received data buffer.
              It is guaranteed that the parameter points to a valid data buffer.
              The data buffer is valid only inside the event handler. If an
              application needs to use the data outside the event handle it must
              allocate own buffer and copy data into it. </param>
            <seealso cref="T:wclCommunication.wclServerClientDataConnection" />
        </member>
        <member name="M:wclCommunication.wclServerDataConnection.#ctor">
            <summary> Creates a new client data connection. </summary>
        </member>
        <member name="E:wclCommunication.wclServerDataConnection.OnData">
            <summary> The event fires when new data is received from the
              connected remote device. </summary>
            <seealso cref="T:wclCommunication.wclServerConnectionDataEvent" />
        </member>
        <member name="T:wclCommunication.wclCustomDataProcessor">
            <summary> The base class for all WCL Data Processors. </summary>
            <remarks> The Data Processor is a class the allows to add additional
              data processing for Connections. </remarks>
        </member>
        <member name="M:wclCommunication.wclCustomDataProcessor.Free">
            <summary> Frees the data processor object. </summary>
        </member>
        <member name="M:wclCommunication.wclCustomDataProcessor.ProcessData(System.Byte[])">
            <summary> The method called by the Connection when data has been
              received from a remote device. </summary>
            <param name="Data"> The pointer to the received data buffer.
              The data buffer is valid only inside the event handler. If an
              application needs to use the data outside the method it must
              allocate own buffer and copy data. </param>
            <remarks> <para> A derived classes must override this method to process
              the received data. </para>
              <para> The <c>Data</c> parameter is valid only inside the
              procedure. If a derived class needs to use data outside the method it
              must copy the data into internal buffer. </para> </remarks>
        </member>
        <member name="M:wclCommunication.wclCustomDataProcessor.WriteData(System.Byte[],System.UInt32@)">
            <summary> Implements a connection-dependent code that sends data to the
              connected device. </summary>
            <param name="Data"> The pointer to the data buffer that should be sent
              to the connected device. </param>
            <param name="Written"> The amount of bytes actually written to the
              device. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to implement a
              connection-dependent code that sends data to the connected
              device. </remarks>
        </member>
        <member name="M:wclCommunication.wclCustomDataProcessor.Write(System.Byte[])">
            <summary> Sends data to the connected device. </summary>
            <param name="Data"> The pointer to the data buffer that should be sent
              to the connected device. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclCommunication.wclCustomDataProcessor.#ctor">
            <summary> Creates new Data Processor object. </summary>
        </member>
        <member name="M:wclCommunication.wclCustomDataProcessor.Finalize">
            <exclude />
        </member>
        <member name="M:wclCommunication.wclCustomDataProcessor.Dispose">
            <summary> Frees the data processor object. </summary>
            <summary> Instead of using GC and finalizer an application must dispose a message object. </summary>
        </member>
        <member name="T:wclCommunication.wclCustomClientDataProcessor">
            <summary> The base class for all WCL Client Data Processors. </summary>
            <remarks> The Client Data Processor allows to add additional data
              processing for the Client Data Connections. </remarks>
            <seealso cref="T:wclCommunication.wclCustomDataProcessor" />
            <seealso cref="T:wclCommunication.wclClientDataConnection" />
        </member>
        <member name="M:wclCommunication.wclCustomClientDataProcessor.Free">
            <summary> Frees the data processor object. </summary>
        </member>
        <member name="M:wclCommunication.wclCustomClientDataProcessor.WriteData(System.Byte[],System.UInt32@)">
            <summary> Writes data to the Client Connection. </summary>
            <param name="Data"> The pointer to the data buffer that should be sent
              to the connected device. </param>
            <param name="Written"> The amount of bytes actually written to the
              device. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclCommunication.wclCustomClientDataProcessor.#ctor(wclCommunication.wclClientDataConnection)">
            <summary> Creates new Client Data Processor. </summary>
            <param name="Connection"> A <see cref="T:wclCommunication.wclClientDataConnection" />
              object that is used to communicate with a remote device. If the
             parameter is <c>null</c> the <see cref="T:wclCommon.wclEInvalidArgument" />
              exception raises. </param>
            <exception cref="T:wclCommon.wclEInvalidArgument" />
            <seealso cref="T:wclCommunication.wclClientDataConnection" />
        </member>
        <member name="P:wclCommunication.wclCustomClientDataProcessor.Connection">
            <summary> Gets the connection object used to communicate with a remote
              device. </summary>
            <value> The <see cref="T:wclCommunication.wclClientDataConnection" /> object. </value>
            <seealso cref="T:wclCommunication.wclClientDataConnection" />
        </member>
        <member name="T:wclCommunication.wclClientConnectionProcessorEvent">
            <summary> The Data Client Component's event handler prototype for
              <c>OnCreateProcessor</c> and <c>OnDestroyProcessor</c>
              events. </summary>
            <param name="Sender"> The object that initiated the event. </param>
            <param name="Connection"> The <see cref="T:wclCommunication.wclClientDataConnection" />
              object that requires a Data Processor. </param>
            <seealso cref="T:wclCommunication.wclClientDataConnection" />
            <seealso cref="T:wclCommunication.wclCustomClientDataProcessor" />
        </member>
        <member name="T:wclCommunication.wclCustomServerClientDataProcessor">
            <summary> The base class for all WCL Server Client Data
              Processors. </summary>
            <remarks> The Server Client Data Processor allows to add additional data
              processing for the Server Client Data Connections. </remarks>
            <seealso cref="T:wclCommunication.wclCustomDataProcessor" />
            <seealso cref="T:wclCommunication.wclServerClientDataConnection" />
        </member>
        <member name="M:wclCommunication.wclCustomServerClientDataProcessor.Free">
            <summary> Frees the data processor object. </summary>
        </member>
        <member name="M:wclCommunication.wclCustomServerClientDataProcessor.WriteData(System.Byte[],System.UInt32@)">
            <summary> Writes data to the Connection. </summary>
            <param name="Data"> The pointer to the data buffer that should be sent
              to the connected device. </param>
            <param name="Written"> The amount of bytes actually written to the
              device. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclCommunication.wclCustomServerClientDataProcessor.#ctor(wclCommunication.wclServerClientDataConnection)">
            <summary> Creates new Client Data Processor. </summary>
            <param name="Connection"> A
              <see cref="T:wclCommunication.wclServerClientDataConnection" /> object that is used to
              communicate with a remote device. If the parameter is <c>null</c> the
              <see cref="T:wclCommon.wclEInvalidArgument" /> exception raises. </param>
            <exception cref="T:wclCommon.wclEInvalidArgument" />
            <seealso cref="T:wclCommunication.wclServerClientDataConnection" />
        </member>
        <member name="P:wclCommunication.wclCustomServerClientDataProcessor.Connection">
            <summary> Gets the connection object used to communicate with a remote
              device. </summary>
            <value> The <see cref="T:wclCommunication.wclServerClientDataConnection" />
              object. </value>
            <seealso cref="T:wclCommunication.wclServerClientDataConnection" />
        </member>
        <member name="T:wclCommunication.wclServerConnectionProcessorEvent">
            <summary> The Data Server Component's event handler prototype for
              <c>OnCreateProcessor</c> and <c>OnDestroyProcessor</c>
              events. </summary>
            <param name="Sender"> The object that initiated the event. </param>
            <param name="Connection"> The
              <see cref="T:wclCommunication.wclServerClientDataConnection" /> object that requires a
              Data Processor. </param>
            <seealso cref="T:wclCommunication.wclServerDataConnection" />
            <seealso cref="T:wclCommunication.wclServerClientDataConnection" />
        </member>
        <member name="T:wclCommunication.wclObexOperationResultEvent">
            <summary> The common OBEX operation result event handler
              prototype. </summary>
            <param name="Sender"> The object that initiated the event. </param>
            <param name="Error"> The operation result code. If operation has been
              completed with success the <c>Error</c> is
              <seealso cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. </param>
            <param name="Description"> Additional optinal description of the
              operation result. </param>
        </member>
        <member name="T:wclCommunication.wclObexOperationProgressEvent">
            <summary> The <c>OnProgress</c> event handler prototype. </summary>
            <param name="Sender"> The object that initiated the event. </param>
            <param name="Size"> The transferring object size in bytes. </param>
            <param name="Position"> The current tranferring byte index. </param> 
        </member>
        <member name="T:wclCommunication.wclCustomObexClient">
            <summary> The base class for OBEX client data processors. </summary>
            <seealso cref="T:wclCommunication.wclCustomClientDataProcessor" />
        </member>
        <member name="M:wclCommunication.wclCustomObexClient.Connect(System.Guid,System.Guid,System.String)">
            <summary> Connects to an OBEX server. </summary>
            <param name="Target">Specifys the UUID of the desired application.
              If the <c>Target</c> is not used it must be set to NULL GUID. </param>
            <param name="Who">Can also be used when it is necessary to identify the
              client initiating the exchange. If the <c>Who</c> is not used it must
              be set to NULL GUID. </param>
            <param name="Description">Provides an information about the device
              or service. If the <c>Description</c> is not used it must be set to
              an empty string.</param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks><para> <c>Target</c> and <c>Who</c> are used to hold a unique
              identifier, which allows applications to tell whether they are
              talking to a strict peer, or not. Typically, this is used to enable
              additional capabilities supplied only by an exact peer. </para>
              <para> On full-featured [PC] platforms, multiple OBEX applications may
              exist concurrently. This leads to the need for the client to be able
              to uniquely identify which server it wants to handle its request. The
              server is therefore identified with the OBEX <c>Target</c> header. If
              necessary, the client can also identify itself, using the OBEX
              <c>Who</c> header. The following text describes the exact uses of these
              headers. </para>
              <para> To target a specific application with OBEX commands the client
              must set-up a connection to the application by using the OBEX
              <c>Target</c> header in a CONNECT request. This type of connection is
              called a directed connection and provides a virtual binding between
              the client and server. The <c>Target</c> header should specify the
              UUID of the desired application. The <c>Who</c> header can also be
              used when it is necessary to identify the client initiating the
              exchange. The <c>Who</c> header should be used in cases where
              the target server application supports different client applications
              and may care which one it is connecting to. It is unnecessary to send
              a <c>Who</c> header in the request if its only logical value is the
              same as the <c>Target</c> header. </para> </remarks>
        </member>
        <member name="M:wclCommunication.wclCustomObexClient.Get(System.String,System.String,System.IO.Stream)">
            <summary> Requests an object from a server. </summary>
            <param name="Name"> The object's name. If the parameter is an empty
              string the Name is ignored.  </param>
            <param name="Mime"> The object's MIME type. If the parameter is an empty
              string the Mime is ignored. </param>
            <param name="Stream"> The object's data stream. This must be valid
              empty stream object. The stream must have write access
              permition. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> The method starts receiving an object from an OBEX
              server. When sending is completed the <c>OnGetComplete</c> event fires
              with the operation result. </para>
              <para> The Stream object passed to the method must be valid until
              <c>OnGetComplete</c> event fires. An application can destroy the
              stream object passed as the <c>Stream</c> parameter only after
              <c>OnGetComplete</c> event fired. </para>
              <para> During execution of the Get operation the <c>OnProgress</c>
              event may (or may not) fire indicating the operation
              progress. </para> </remarks>
        </member>
        <member name="M:wclCommunication.wclCustomObexClient.Put(System.String,System.String,System.String,System.IO.Stream,System.Byte[])">
            <summary> Sends one object from the client to the server. </summary>
            <param name="Name"> The object's name. If the parameter is an empty
              string the Name is ignored.  </param>
            <param name="Mime"> The object's MIME type. If the parameter is an empty
              string the Mime is ignored. </param>
            <param name="Description"> The object's description. If the parameter is
              an empty string the Description is ignored. </param>
            <param name="Stream"> The object's data stream. If the parameter is
              <c>null</c> it forces to delete the object with the name specified
              by the <c>Name</c> parameter or with MIME type specified by the
              <c>Mime</c> parameter. If the <c>Stream</c> parameter is an empty
              stream (it is not <c>null</c> and the Stream size is <c>0</c>)
              it forces a server to create an empty object with the given Name or
              MIME. </param>
            <param name="AppParams"> The application parameters raw bytes. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> The method starts sending an object (or other operation
              described above) to a OBEX server. When sending is completed the
              <c>OnPutComplete</c> event fires with the operation result. </para>
              <para> If an application passes a valid Stream object to the method
              the object must be valid until <c>OnPutComplete</c> event fires.
              An application can destroy the stream object passed as the
              <c>Stream</c> parameter only after <c>OnPutComplete</c> event
              fired. </para>
              <para> During execution of the Put operation the <c>OnProgress</c>
              event may (or may not) fire indicating the operation
              progress. </para> </remarks>
        </member>
        <member name="M:wclCommunication.wclCustomObexClient.SetPath(System.String,System.Boolean)">
            <summary> Changes the current directory on the server's side. </summary>
            <param name="Dir"> The directory name. If the <c>Dir</c> value is
              <c>".."</c> it tells to the server to backup a level (go one level
              up). If the <c>Dir</c> is an empty string it tells to the server to
              go to the default (root) directory). </param>
            <param name="Create"> If this parameter is set to <c>True</c> it tells
              server to create new directory with the given name. If this parameter
              is set to <c>False</c> and the directory specified in the <c>Dir</c>
              parameter does not exists the <c>WCL_E_OBEX_BAD_REQUEST</c> or
              the <c>WCL_E_OBEX_FORBIDDEN</c> error returned as the operation
              complete result. </param>
            <remarks> The method sets the current directory on the receiving side in
              order to enable transfers that need additional path information. For
              instance, when a nested set of directories is sent between two
              machines, <c>SetPath</c> is used to create the directory structure on
              the receiving side. </remarks>
        </member>
        <member name="M:wclCommunication.wclCustomObexClient.ProcessData(System.Byte[])">
            <summary> The method called by the Connection when data has been
              received from a remote device. </summary>
            <param name="Data"> The pointer to the received data buffer.
              The data buffer is valid only inside the event handler. If an
              application needs to use the data outside the method it must
              allocate own buffer and copy data. </param>
        </member>
        <member name="M:wclCommunication.wclCustomObexClient.DoConnect(System.Int32,System.String)">
            <summary> Fires the <c>OnConnect</c> event. </summary>
            <param name="Error"> The operation result code. If operation has been
              completed with success the <c>Error</c> is
              <seealso cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. </param>
            <param name="Description"> Additional optinal description of the
              operation result. </param>
        </member>
        <member name="M:wclCommunication.wclCustomObexClient.DoDisconnect(System.Int32,System.String)">
            <summary> Fires the <c>OnDisconnect</c> event. </summary>
            <param name="Error"> The operation result code. If operation has been
              completed with success the <c>Error</c> is
              <seealso cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. </param>
            <param name="Description"> Additional optinal description of the
              operation result. </param>
        </member>
        <member name="M:wclCommunication.wclCustomObexClient.DoGetComplete(System.Int32,System.String,System.IO.Stream)">
            <summary> The method called when the OBEX GET operation has been
              completed. </summary>
            <param name="Error"> The operation result code. If operation has been
              completed with success the <c>Error</c> is
              <seealso cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. </param>
            <param name="Description"> Additional optional description of the
              operation result. </param>
            <param name="Stream"> The stream object used in operation. </param>
        </member>
        <member name="M:wclCommunication.wclCustomObexClient.DoProgress(System.UInt32,System.UInt32)">
            <summary> Fires the <c>OnProgress</c> event. </summary>
            <param name="Size"> The transferring object size in bytes. </param>
            <param name="Position"> The current tranferring byte index. </param>
        </member>
        <member name="M:wclCommunication.wclCustomObexClient.DoPutComplete(System.Int32,System.String,System.IO.Stream)">
            <summary> The method called when the OBEX PUT operation has been
              completed. </summary>
            <param name="Error"> The operation result code. If operation has been
              completed with success the <c>Error</c> is
              <seealso cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. </param>
            <param name="Description"> Additional optional description of the
              operation result. </param>
            <param name="Stream"> The stream object used in operation. </param>
        </member>
        <member name="M:wclCommunication.wclCustomObexClient.DoSetPathComplete(System.Int32,System.String)">
            <summary> The method called when the OBEX SET_PATH operation has
              been completed. </summary>
            <param name="Error"> The operation result code. If operation has been
              completed with success the <c>Error</c> is
              <seealso cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. </param>
            <param name="Description"> Additional optional description of the
              operation result. </param>
        </member>
        <member name="M:wclCommunication.wclCustomObexClient.Free">
            <summary> Frees the Data Processor. </summary>
        </member>
        <member name="M:wclCommunication.wclCustomObexClient.#ctor(wclCommunication.wclClientDataConnection)">
            <summary> Creates new OBEX Client Data Processor. </summary>
            <param name="Connection"> A <see cref="T:wclCommunication.wclClientDataConnection" />
              object that is used to communicate with a remote device. If the
             parameter is <c>null</c> the <see cref="T:wclCommon.wclEInvalidArgument" />
              exception raises. </param>
            <exception cref="T:wclCommon.wclEInvalidArgument" />
            <seealso cref="T:wclCommunication.wclClientDataConnection" />
        </member>
        <member name="M:wclCommunication.wclCustomObexClient.Abort(System.String)">
            <summary> Aborts current operation executing. </summary>
            <param name="Description"> An optional text value that describes
              the abort reason or provides any other information for
              a user on the server size. If this parameter is an empty string
              the description will not be sent to a server. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> Only <c>Pun</c> and <c>Get</c> operations can be
              aborted. </remarks>
        </member>
        <member name="M:wclCommunication.wclCustomObexClient.Disconnect(System.String)">
            <summary> Disconnects from an OBEX server. </summary>
            <param name="Description"> An optional text value that describes
              the disconnect reason or provides any other information for
              a user on the server size. If this parameter is an empty string
              the description will not be sent to a server. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="P:wclCommunication.wclCustomObexClient.Connected">
            <summary> Gets the connected tstae. </summary>
            <value> <c>True</c> if the OBEX session was established. <c>False</c>
              otherwise. </value>
        </member>
        <member name="E:wclCommunication.wclCustomObexClient.OnConnect">
            <summary> The event fires when the Connect operation has been completed
              completed. </summary>
            <seealso cref="T:wclCommunication.wclObexOperationResultEvent" />
        </member>
        <member name="E:wclCommunication.wclCustomObexClient.OnDisconnect">
            <summary> The event fires when the Disconnect operation
              completed. </summary>
            <seealso cref="T:wclCommunication.wclObexOperationResultEvent" />
        </member>
        <member name="E:wclCommunication.wclCustomObexClient.OnProgress">
            <summary> The event fires during sending or receiving an object
              to indicate operation prorgess. </summary>
            <seealso cref="T:wclCommunication.wclObexOperationProgressEvent" />
        </member>
        <member name="T:wclCommunication.wclObexObjectOperationResultEvent">
            <summary> The Put and Get OBEX operations result event handler prototype. </summary>
            <param name="Sender"> The object that initiated the event. </param>
            <param name="Error"> The operation result code. If operation has been
              completed with success the <c>Error</c> is
              <seealso cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. </param>
            <param name="Description"> Additional optinal description of the
              operation result. </param>
            <param name="Stream"> The stream object used in operation. </param>
        </member>
        <member name="T:wclCommunication.wclObexFileClient">
            <summary> The base class for OBEX file based clients: OPP, FTP,
              etc. </summary>
            <remarks> The class provides some basic events and methods that are common
              for all file based OBEX clients. </remarks>
            <seealso cref="T:wclCommunication.wclCustomObexClient" />
        </member>
        <member name="M:wclCommunication.wclObexFileClient.DoGetComplete(System.Int32,System.String,System.IO.Stream)">
            <summary> Fires the <c>OnGetComplete</c> event. </summary>
            <param name="Error"> The operation result code. If operation has been
              completed with success the <c>Error</c> is
              <seealso cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. </param>
            <param name="Description"> Additional optional description of the
              operation result. </param>
            <param name="Stream"> The stream object used in operation. </param>
        </member>
        <member name="M:wclCommunication.wclObexFileClient.DoPutComplete(System.Int32,System.String,System.IO.Stream)">
            <summary> Fires the <c>OnPutComplete</c> event. </summary>
            <param name="Error"> The operation result code. If operation has been
              completed with success the <c>Error</c> is
              <seealso cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. </param>
            <param name="Description"> Additional optional description of the
              operation result. </param>
            <param name="Stream"> The stream object used in operation. </param>
        </member>
        <member name="M:wclCommunication.wclObexFileClient.#ctor(wclCommunication.wclClientDataConnection)">
            <summary> Creates new OBEX File Client Data Processor. </summary>
            <param name="Connection"> A <see cref="T:wclCommunication.wclClientDataConnection" />
              object that is used to communicate with a remote device. If the
             parameter is <c>nil</c> the <see cref="T:wclCommon.wclEInvalidArgument" />
              exception raises. </param>
            <exception cref="T:wclCommon.wclEInvalidArgument" />
            <seealso cref="T:wclCommunication.wclClientDataConnection" />
        </member>
        <member name="M:wclCommunication.wclObexFileClient.Put(System.String,System.String,System.IO.Stream)">
            <summary> Sends one object from the client to the server. </summary>
            <param name="Name"> The object's name. If the parameter is an empty
              string the Name is ignored.  </param>
            <param name="Description"> The object's description. If the parameter is
              an empty string the Description is ignored. </param>
            <param name="Stream"> The object's data stream. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> The method starts sending an object to an OBEX server.
              When sending is completed the <c>OnPutComplete</c> event fires with
              the operation result. </para>
              <para> If an application passes a valid Stream object to the method
              the object must be valid until <c>OnPutComplete</c> event fires.
              An application can destroy the stream object passed as the
              <c>Stream</c> parameter only after <c>OnPutComplete</c> event
              fired. </para>
              <para> During execution of the Put operation the <c>OnProgress</c>
              event may (or may not) fire indicating the operation
              progress. </para> </remarks>
        </member>
        <member name="E:wclCommunication.wclObexFileClient.OnGetComplete">
            <summary> The event fires when the Get operation has been
              completed. </summary>
            <remarks> If the operation completed with success the Stream object
              contains the object's data. If the operation completed with error
              the Stream contains a partial data and is invalid. An application can
              not use the object from the Stream if the operation completed with
              error. </remarks>
            <seealso cref="T:wclCommunication.wclObexObjectOperationResultEvent" />
        </member>
        <member name="E:wclCommunication.wclObexFileClient.OnPutComplete">
            <summary> The event fires when the Put operation has been
              completed. </summary>
            <remarks> An application can dispose the Stream object passed to the Put
              method. The state of the Stream object is changed. </remarks>
            <seealso cref="T:wclCommunication.wclObexObjectOperationResultEvent" />
        </member>
        <member name="T:wclCommunication.wclObexOppClient">
            <summary> The data processor implements the OBEX Object Push Profile
              client. </summary>
            <seealso cref="T:wclCommunication.wclObexFileClient" />
        </member>
        <member name="M:wclCommunication.wclObexOppClient.#ctor(wclCommunication.wclClientDataConnection)">
            <summary> Creates new OBEX OPP Client. </summary>
            <param name="Connection"> A <see cref="T:wclCommunication.wclClientDataConnection" />
              object that is used to communicate with a remote device. If the
             parameter is <c>null</c> the <see cref="T:wclCommon.wclEInvalidArgument" />
              exception raises. </param>
            <exception cref="T:wclCommon.wclEInvalidArgument" />
            <seealso cref="T:wclCommunication.wclClientDataConnection" />
        </member>
        <member name="M:wclCommunication.wclObexOppClient.Connect">
            <summary> Connects to an OBEX server. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclCommunication.wclObexOppClient.Get(System.String,System.IO.Stream)">
            <summary> The function reads the default object with given type from an
              OBEX Push server. </summary>
            <param name="aType"> The object's type. </param>
            <param name="Stream"> The object's data stream. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> This function can be used to pull (request) the default
              business card (vCard) from a target device. To do that the
              <c>aType</c> parameter must be "text/x-vCard" string. </para>
              <para> An application must pass a valid Stream object to the method
              and the stream object must be valid until <c>OnGetComplete</c> event
              fires. An application can destroy the stream object passed as the
              <c>Stream</c> parameter only after <c>OnGetComplete</c> event
              fired. </para>
              <para> During execution of the Get operation the <c>OnProgress</c>
              event may (or may not) fire indicating the operation
              progress. </para> </remarks>
        </member>
        <member name="T:wclCommunication.wclObexFilePermission">
            <summary> The OBEX file object permission. </summary>
        </member>
        <member name="F:wclCommunication.wclObexFilePermission.opRead">
            <summary> Read permission. </summary>
            <remarks> The <c>READ</c> permission applies to all object types. It
              indicates that an attempt to <c>GET</c> the named object should
              successfully retrieve its contents. </remarks>
        </member>
        <member name="F:wclCommunication.wclObexFilePermission.opWrite">
            <summary> Write permission. </summary>
            <remarks> The <c>WRITE</c> permission applies to all object types. It
              indicates that an attempt to modify the contents of the file by
              <c>PUT</c>’ing to the file should succeed. For folder objects it
              indicates that attempts to create a folder or other object within that
              folder should succeed. </remarks>
        </member>
        <member name="F:wclCommunication.wclObexFilePermission.opDelete">
            <summary> Delete permission. </summary>
            <remarks> The <c>DELETE</c> permission applies to file types. It
              indicates that the file may be removed by sending a <c>DELETE</c>
              command. </remarks>
        </member>
        <member name="T:wclCommunication.wclObexFileObject">
            <summary> The record describes the OBEX file system object. </summary>
        </member>
        <member name="F:wclCommunication.wclObexFileObject.IsDirectory">
            <summary> If this member is <c>True</c> the file system object is
              directory. If this member is <c>False</c> the file system object
              if file. </summary>
        </member>
        <member name="F:wclCommunication.wclObexFileObject.Name">
            <summary> The file system object name. </summary>
        </member>
        <member name="F:wclCommunication.wclObexFileObject.Description">
            <summary> The object's description. </summary>
        </member>
        <member name="F:wclCommunication.wclObexFileObject.Size">
            <summary> The file system object size in bytes. If the file system
              object is directory this member is always 0. </summary>
        </member>
        <member name="F:wclCommunication.wclObexFileObject.Permissions">
            <summary> The user level permissions. </summary>
            <remarks> A permission indicator does not imply that the appropriate
              command is guaranteed to work – just that it might. Other system
              specific limitations, such as limitations on available space for
              storing objects, may cause an operation to fail, where the permission
              flags may have indicated that it was likely to succeed. The
              permissions are a guide only. Some systems may have more specific
              permissions than those listed here, such systems should map those
              to the flags defined as best they are able. </remarks>
            <seealso cref="T:wclCommunication.wclObexFilePermission" />
        </member>
        <member name="F:wclCommunication.wclObexFileObject.Modified">
            <summary> The last modified time for the object. </summary>
        </member>
        <member name="F:wclCommunication.wclObexFileObject.Created">
            <summary> The creation time for the object. </summary>
        </member>
        <member name="F:wclCommunication.wclObexFileObject.Accessed">
            <summary> The last accessed time for the object. </summary>
        </member>
        <member name="T:wclCommunication.wclObexFtpDirCompleteEvent">
            <summary> The <c>OnDirComplete</c> event handler prototype. </summary>
            <param name="Sender"> The object that initiated the event. </param>
            <param name="Error"> The operation result code. If operation has been
              completed with success the <c>Error</c> is
              <seealso cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. </param>
            <param name="Description"> Additional optinal description of the
              operation result. </param>
            <param name="Dirs"> The array of file system objects. This parameter can
              be <c>nil</c> if no file system objects found in current directory or
              if <c>Error</c> parameter is not <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. </param>
            <seealso cref="T:wclCommunication.wclObexFileObject" />
        </member>
        <member name="T:wclCommunication.wclObexFtpClient">
            <summary> The data processor implements the OBEX File Transfer Profile
              client. </summary>
            <seealso cref="T:wclCommunication.wclObexFileClient" />
        </member>
        <member name="M:wclCommunication.wclObexFtpClient.DoGetComplete(System.Int32,System.String,System.IO.Stream)">
            <summary> The method called when the OBEX GET operation has been
              completed. </summary>
            <param name="Error"> The operation result code. If operation has been
              completed with success the <c>Error</c> is
              <seealso cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. </param>
            <param name="Description"> Additional optinal description of the
              operation result. </param>
            <param name="Stream"> The stream object used in operation. </param>
        </member>
        <member name="M:wclCommunication.wclObexFtpClient.DoPutComplete(System.Int32,System.String,System.IO.Stream)">
            <summary> The method called when the OBEX PUT operation has been
              completed. </summary>
            <param name="Error"> The operation result code. If operation has been
              completed with success the <c>Error</c> is
              <seealso cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. </param>
            <param name="Description"> Additional optional description of the
              operation result. </param>
            <param name="Stream"> The stream object used in operation. </param>
        </member>
        <member name="M:wclCommunication.wclObexFtpClient.DoSetPathComplete(System.Int32,System.String)">
            <summary> The method called when the OBEX SET_PATH operation has
              been completed. </summary>
            <param name="Error"> The operation result code. If operation has been
              completed with success the <c>Error</c> is
              <seealso cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. </param>
            <param name="Description"> Additional optional description of the
              operation result. </param>
        </member>
        <member name="M:wclCommunication.wclObexFtpClient.#ctor(wclCommunication.wclClientDataConnection)">
            <summary> Creates new OBEX File Transfer Profile Client Data
              Processor. </summary>
            <param name="Connection"> A <see cref="T:wclCommunication.wclClientDataConnection" />
              object that is used to communicate with a remote device. If the
              parameter is <c>nil</c> the <see cref="T:wclCommon.wclEInvalidArgument" />
              exception raises. </param>
            <exception cref="T:wclCommon.wclEInvalidArgument" />
            <seealso cref="T:wclCommunication.wclClientDataConnection" />
        </member>
        <member name="M:wclCommunication.wclObexFtpClient.Connect">
            <summary> Connects to an OBEX server. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclCommunication.wclObexFtpClient.ChangeDir(System.String)">
            <summary> Changes current directory to the child directory. </summary>
            <param name="Name"> The child directory name. Use ".." to go one level
              up. Use empty name to go to the root directory. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> When operation completed the <c>OnChangeDirComplete</c>
              event fires. </remarks>
        </member>
        <member name="M:wclCommunication.wclObexFtpClient.Delete(System.String)">
            <summary> Deletes the object with given name. </summary>
            <param name="Name"> The object's name. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> The object can be any object: file, directory, virtual
              object. </para>
              <para> When the operation completed the <c>OnDeleteComplete</c> event
              fires. </para> </remarks>
        </member>
        <member name="M:wclCommunication.wclObexFtpClient.Dir">
            <summary> Requests the files listing for the current
              directory. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> When operation completed the <c>OnDirComplete</c> event
              fires. </remarks>
        </member>
        <member name="M:wclCommunication.wclObexFtpClient.Get(System.String,System.IO.Stream)">
            <summary> Requests an object from a server. </summary>
            <param name="Name"> The object's name. If the parameter is an empty
              string the Name is ignored.  </param>
            <param name="Stream"> The object's data stream. This must be valid
              empty stream object. The stream must have write access
              permition. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> The method starts receiving an object from an OBEX
              server. When sending is completed the <c>OnGetComplete</c> event fires
              with the operation result. </para>
              <para> The Stream object passed to the method must be valid until
              <c>OnGetComplete</c> event fires. An application can destroy the
              stream object passed as the <c>Stream</c> parameter only after
              <c>OnGetComplete</c> event fired. </para>
              <para> During execution of the Get operation the <c>OnProgress</c>
              event may (or may not) fire indicating the operation
              progress. </para> </remarks>
        </member>
        <member name="M:wclCommunication.wclObexFtpClient.MkDir(System.String)">
            <summary> Creates new directory. </summary>
            <param name="Name"> The directory name. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> When operation completed the <c>OnMakeDirComplete</c>
              event fires. </para>
              <para> If the operation completed with success the current directory
              is changed to the just created directory. </para> </remarks>
        </member>
        <member name="M:wclCommunication.wclObexFtpClient.Put(System.String,System.String,System.IO.Stream)">
            <summary> Sends one object from the client to the server. </summary>
            <param name="Name"> The object's name. </param>
            <param name="Description"> The object's description. If the parameter is
              an empty string the Description is ignored. </param>
            <param name="Stream"> The object's data stream. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> The method starts sending an object to an OBEX server.
              When sending is completed the <c>OnPutComplete</c> event fires with
              the operation result. </para>
              <para> If an application passes a valid Stream object to the method
              the object must be valid until <c>OnPutComplete</c> event fires.
              An application can destroy the stream object passed as the
              <c>Stream</c> parameter only after <c>OnPutComplete</c> event
              fired. </para>
              <para> During execution of the Put operation the <c>OnProgress</c>
              event may (or may not) fire indicating the operation
              progress. </para> </remarks>
        </member>
        <member name="E:wclCommunication.wclObexFtpClient.OnChangeDirComplete">
            <summary> The event fires when the change directory operation has been
              completed. </summary>
            <seealso cref="T:wclCommunication.wclObexOperationResultEvent" />
        </member>
        <member name="E:wclCommunication.wclObexFtpClient.OnDeleteComplete">
            <summary> The event fires when the delet operation has been
              completed. </summary>
            <seealso cref="T:wclCommunication.wclObexOperationResultEvent" />
        </member>
        <member name="E:wclCommunication.wclObexFtpClient.OnDirComplete">
            <summary> The event fires when directory listing has been
              completed. </summary>
            <seealso cref="T:wclCommunication.wclObexFtpDirCompleteEvent" />
        </member>
        <member name="E:wclCommunication.wclObexFtpClient.OnMakeDirComplete">
            <summary> The event fires when the creting directory operation has been
              completed. </summary>
            <seealso cref="T:wclCommunication.wclObexOperationResultEvent" />
        </member>
        <member name="T:wclCommunication.wclObexServerClientDisconnectedEvent">
            <summary> The OBEX server data processor <c>OnDisconnect</c> event handler
              prototype. </summary>
            <param name="Sender"> The object that initiated the event. </param>
            <param name="Reason"> The disconnection reason code. </param>
            <param name="Description"> The disconnect reason description. </param>
        </member>
        <member name="T:wclCommunication.wclObexServerClientOperationProgressEvent">
            <summary> The OBEX server data processor <c>OnPutProgress</c> and
              <c>OnGetProgress</c> operations event handler. </summary>
            <param name="Sender"> The object that initiated the event. </param>
            <param name="Position"> The current position in object's data in
              bytes </param>
            <param name="Length"> The current object's length (size) in
              bytes. </param>
            <param name="Continue"> An application must set this flag to <c>True</c>
              if still want continue process the object. If application wants to
              terminate the operation set this flags to <c>False</c>. </param>
        </member>
        <member name="T:wclCommunication.wclObexServerClientPutBeginEvent">
            <summary> The OBEX server data processor <c>OnPutBegin</c> event handler
              prototype. </summary>
            <param name="Sender"> The object that initiated the event. </param>
            <param name="Name"> The object's name. Can be empty. </param>
            <param name="Description"> The object's description. Can be
              empty. </param>
            <param name="Mime"> The object's MIME type. Can be empty. </param>
            <param name="Length"> The object's data size (length) in bytes.
              Can be 0. </param>
            <param name="Accept"> Must be set to <c>True</c> to accept object.
              If set to <c>False</c> the object will be rejected. </param>
        </member>
        <member name="T:wclCommunication.wclObexServerClientPutCompletedEvent">
            <summary> The OBEX server data processor <c>OnPutCompleted</c> event
              handler prototype. </summary>
            <param name="Sender"> The object that initiated the event. </param>
            <param name="Error"> The operation completion reason code. If operation
              completed with success the <c>Reason</c> is WCL_E_SUCCESS. An
              application may accept or reject all the object by setting the
              <c>Accept</c> parameter. </param>
            <param name="Stream"> The received object's data stream. </param>
            <param name="Accept"> Set this parameter to <c>True</c> to accept the
              object. Set this parameter to <c>False</c> to reject the object. In case
              if object rejected the OBEX Forbidden error will be send. </param>
            <remarks> The <c>Stream</c> parameter contains the received object's data.
              This parameter is valid only insode the event handler and must be saved
              or copied by an application if an application needs to use it later.
              The <c>Stream</c> parameter can be <c>null</c> or empty if received
              object does not have body (data). </remarks>
        </member>
        <member name="T:wclCommunication.wclCustomObexServer">
            <summary> The base class for OBEX server data processors. </summary>
            <seealso cref="T:wclCommunication.wclCustomServerClientDataProcessor" />
        </member>
        <member name="M:wclCommunication.wclCustomObexServer.DoConnect(System.Guid,System.Guid,System.String)">
            <summary> The method called when a remote client opens OBEX session
              (connects). </summary>
            <param name="Target"> The requested target service/server ID. </param>
            <param name="Who"> The client's ID. </param>
            <param name="Description"> The connect operation's or client's
              description. </param>
            <remarks> <para> A derived class must override this method to
              accept or reject connection. The default implementation rejects
              any connection requests. </para>
              <para> To accept connection an implementation must call the
              <c>Accept</c> method. To reject the connection request an
              implementation myst call the <c>Reject</c> method. </para>
              <para> In case the <c>Target</c> and/or <c>Who</c> values were not
              provided by a client the values of these parameters are
              <c>GUID_NULL</c>. If the <c>Description</c> was not provided by a
              client the value of this parameter is an empty
              string. </para> </remarks>
        </member>
        <member name="M:wclCommunication.wclCustomObexServer.DoDisconnected(System.Int32,System.String)">
            <summary> Fires the <c>OnDisconnected</c> event. </summary>
            <param name="Reason"> The disconnection reason code. </param>
            <param name="Description"> The disconnect reason description. </param>
        </member>
        <member name="M:wclCommunication.wclCustomObexServer.DoPutBegin(System.String,System.String,System.String,System.UInt32,System.Boolean@)">
            <summary> Fires the <c>OnPutBegin</c> event. </summary>
            <param name="Name"> The object's name. Can be empty. </param>
            <param name="Description"> The object's description. Can be
              empty. </param>
            <param name="Mime"> The object's MIME type. Can be empty. </param>
            <param name="Length"> The object's data size (length) in bytes.
              Can be 0. </param>
            <param name="Accept"> Must be set to <c>True</c> to accept object.
              If set to <c>False</c> the object will be rejected. </param>
            <remarks> The method called when first PUT packet received. </remarks>
        </member>
        <member name="M:wclCommunication.wclCustomObexServer.DoPutCompleted(System.Int32,System.IO.Stream,System.Boolean@)">
            <summary> Fires the <c>OnPutCompleted</c> event. </summary>
            <param name="Error"> The operation completion reason code. If operation
              completed with success the <c>Reason</c> is WCL_E_SUCCESS. An
              application may accept or reject all the object by setting the
              <c>Accept</c> parameter. </param>
            <param name="Stream"> The received object's data stream. </param>
            <param name="Accept"> Set this parameter to <c>True</c> to accept the
              object. Set this parameter to <c>False</c> to reject the object. In
              case if object rejected the OBEX Forbidden error will be
              send. </param>
            <remarks> The <c>Stream</c> parameter contains the received object's
              data. This parameter is valid only insode the event handler and must
              be saved or copied by an application if an application needs to use it
              later. The <c>Stream</c> parameter can be <c>null</c> or empty if
              received object does not have body (data). </remarks>
        </member>
        <member name="M:wclCommunication.wclCustomObexServer.DoPutProgress(System.UInt32,System.UInt32,System.Boolean@)">
            <summary> Fires the <c>OnPutProgress</c> event. </summary>
            <param name="Position"> The current position in object's data in
              bytes </param>
            <param name="Length"> The current object's length (size) in
              bytes. </param>
            <param name="Continue"> An application must set this flag to
              <c>True</c> if still want continue process the object. If application
              wants to terminate the operation set this flags to
              <c>False</c>. </param>
        </member>
        <member name="M:wclCommunication.wclCustomObexServer.ProcessData(System.Byte[])">
            <summary> The method called by the Connection when data has been
              received from a remote device. </summary>
            <param name="Data"> The pointer to the received data buffer.
              The data buffer is valid only inside the event handler. If an
              application needs to use the data outside the method it must
              allocate own buffer and copy data. </param>
        </member>
        <member name="M:wclCommunication.wclCustomObexServer.Free">
            <summary> Frees the Data Processor. </summary>
        </member>
        <member name="P:wclCommunication.wclCustomObexServer.Who">
            <summary> The service ID that is implemented by the server. </summary>
            <value> The UUID of the service. </value>
        </member>
        <member name="M:wclCommunication.wclCustomObexServer.#ctor(wclCommunication.wclServerClientDataConnection)">
            <summary> Creates new OBEX Server Client Data Processor. </summary>
            <param name="Connection"> A
              <see cref="T:wclCommunication.wclServerClientDataConnection" /> object that is used to
              communicate with a remote device. If the parameter is <c>null</c> the
              <see cref="T:wclCommon.wclEInvalidArgument" /> exception raises. </param>
            <exception cref="T:wclCommon.wclEInvalidArgument" />
            <seealso cref="T:wclCommunication.wclServerClientDataConnection" />
        </member>
        <member name="M:wclCommunication.wclCustomObexServer.Accept(System.String)">
            <summary> Accepts the client's connection request. </summary>
            <param name="Description"> The service's description. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> An application calls this method from <c>DoConnect</c>
              method or from <c>OnConnect</c> event handler to accept the connection
              request. </para>
              <para> If the method completed with success the <c>ConnectionId</c>
              property has valid connection ID that can be used to unique identify
              the connected client. </para>
              <para> If method failed the connection request has been rejected by
              the implementation. </para> </remarks>
        </member>
        <member name="M:wclCommunication.wclCustomObexServer.Reject(System.String)">
            <summary> Rejects the connection request. </summary>
            <param name="Description"> The string description of the rejection
              reason. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> An application calls this method from <c>DoConnect</c>
              method or from <c>OnConnect</c> event handler to reject the connection
              request. </para> </remarks>
        </member>
        <member name="P:wclCommunication.wclCustomObexServer.Connected">
            <summary> Gets the connected state. </summary>
            <value> <c>True</c> if the OBEX session was established (client is
              connected). <c>False</c> otherwise. </value>
        </member>
        <member name="P:wclCommunication.wclCustomObexServer.ConnectionId">
            <summary> Connection ID. </summary>
            <value> The unique connection ID of the current OBEX session. Zero if
              client is not connected yet. </value>
            <remarks> <para> The Connection ID is assigned internally when a remote
              client opens OBEX session. An application may use this value to unique
              identify the connected client and/or session. </para>
              <para> The Connect ID value is unique per application. If the
              Connection ID is zero the OBEX session has not been established
              yet. </para> </remarks>
        </member>
        <member name="P:wclCommunication.wclCustomObexServer.Description">
            <summary> The current server's description. </summary>
            <value> The string value that describes the server. </value>
        </member>
        <member name="P:wclCommunication.wclCustomObexServer.Target">
            <summary> The current connected client's ID. </summary>
            <value> The UUID of the current connected client. </value>
            <remarks> If the connected client did not provide its ID the value
             of this property is <c>GUID_NULL</c>. </remarks>
        </member>
        <member name="E:wclCommunication.wclCustomObexServer.OnDisconnected">
            <summary> The event fires when a remote client closes the OBEX session
              (disconnects). </summary>
            <seealso cref="T:wclCommunication.wclObexServerClientDisconnectedEvent" />
        </member>
        <member name="E:wclCommunication.wclCustomObexServer.OnPutBegin">
            <summary> The event fires when client started object sending (OBEX PUT)
              operation. An application must accept or reject the object. </summary>
            <seealso cref="T:wclCommunication.wclObexServerClientPutBeginEvent" />
        </member>
        <member name="E:wclCommunication.wclCustomObexServer.OnPutCompleted">
            <summary> The event fires when all object has been received. </summary>
            <seealso cref="T:wclCommunication.wclObexServerClientPutCompletedEvent" />
        </member>
        <member name="E:wclCommunication.wclCustomObexServer.OnPutProgress">
            <summary> The event fires during receiving the object. </summary>
            <remarks> The event may fire one or more times per object. </remarks>
            <seealso cref="T:wclCommunication.wclObexServerClientOperationProgressEvent" />
        </member>
        <member name="T:wclCommunication.wclObexOppServerConnectEvent">
            <summary> The <c>OnConnect</c> even handler prototype for the
              OBEX Object Push Profile Server data processor. </summary>
            <param name="Sender"> The object that initiated the event. </param>
            <param name="Description"> The client's description. </param>
        </member>
        <member name="T:wclCommunication.wclObexOppServer">
            <summary> The data processor implements the OBEX Object Push Profile
              server. </summary>
            <seealso cref="T:wclCommunication.wclCustomObexServer" />
        </member>
        <member name="M:wclCommunication.wclObexOppServer.DoConnect(System.Guid,System.Guid,System.String)">
            <summary> The method called when a remote client opens OBEX session
              (connects). </summary>
            <param name="Target"> The requested target service/server ID. </param>
            <param name="Who"> The client's ID. </param>
            <param name="Description"> The connect operation's or client's
              description. </param>
        </member>
        <member name="M:wclCommunication.wclObexOppServer.#ctor(wclCommunication.wclServerClientDataConnection)">
            <summary> Creates new OBEX Server Client Data Processor. </summary>
            <param name="Connection"> A
              <see cref="T:wclCommunication.wclServerClientDataConnection" /> object that is used to
              communicate with a remote device. If the parameter is <c>null</c> the
              <see cref="T:wclCommon.wclEInvalidArgument" /> exception raises. </param>
            <exception cref="T:wclCommon.wclEInvalidArgument" />
            <seealso cref="T:wclCommunication.wclServerClientDataConnection" />
        </member>
        <member name="E:wclCommunication.wclObexOppServer.OnConnect">
            <summary> The event fires when a client connects to the
              server. </summary>
            <remarks> The server should accept connection by calling <c>Accept</c>
              method or reject connection by calling <c>Reject</c>
              method. </remarks>
            <seealso cref="T:wclCommunication.wclObexOppServerConnectEvent" />
        </member>
    </members>
</doc>
