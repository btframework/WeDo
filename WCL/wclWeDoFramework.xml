<?xml version="1.0"?>
<doc>
    <assembly>
        <name>wclWeDoFramework</name>
    </assembly>
    <members>
        <member name="T:wclWeDoFramework.wclBatteryLevelChangedEvent">
            <summary> The <c>OnBatteryLevelChanged</c> event handler prototype. </summary>
            <param name="Sender"> The object that fired the event. </param>
            <param name="Level"> The current battery level in percents in range 0-100. </param>
        </member>
        <member name="T:wclWeDoFramework.wclWeDoBatteryLevelService">
            <summary> The class represents the WeDo Battery Level service. </summary>
            <seealso cref="T:wclWeDoFramework.wclWeDoService"/>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoBatteryLevelService.DoBatteryLevelChanged(System.Byte)">
            <summary> Fires the <c>OnBatteryLevelChanged</c> event. </summary>
            <param name="Level"> The current battery level in percents in range 0-100. </param>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoBatteryLevelService.Initialize">
            <summary> Initializes the WeDo service. </summary>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoBatteryLevelService.Uninitialize">
            <summary> Uninitializes the WeDo service. </summary>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoBatteryLevelService.CharacteristicChanged(System.UInt16,System.Byte[])">
            <summary> This method called internally by the <see cref="T:wclWeDoFramework.wclWeDoHub"/>
              to notify about characteristic changes. A derived class may override this method
              to check for required characteristic changes. </summary>
            <param name="Handle"> The characteristic handle. </param>
            <param name="Value"> The new characteristic value. </param>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoBatteryLevelService.#ctor(wclBluetooth.wclGattClient,wclWeDoFramework.wclWeDoHub)">
            <summary> Creates new Battery Level service client. </summary>
            <param name="Client"> The <see cref="T:wclBluetooth.wclGattClient"/> object that handles the connection
              to a WeDo device. </param>
            <param name="Hub"> The <see cref="T:wclWeDoFramework.wclWeDoHub"/> object that owns the service. </param>
            <exception cref="T:wclCommon.wclEInvalidArgument"> The exception raises if the <c>Client</c> or <c>Hub</c>
              parameter is <c>null</c>. </exception>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoBatteryLevelService.ReadBatteryLevel(System.Byte@)">
            <summary> Reads the device's battery level. </summary>
            <param name="Level"> the current battery level in percents. </param>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
        </member>
        <member name="E:wclWeDoFramework.wclWeDoBatteryLevelService.OnBatteryLevelChanged">
            <summary> The event fires when the battery level has been changed. </summary>
            <seealso cref="T:wclWeDoFramework.wclBatteryLevelChangedEvent" />
        </member>
        <member name="T:wclWeDoFramework.wclWeDoCurrentSensor">
            <summary> The class represents a WeDo Hub current sensor. </summary>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoCurrentSensor.ValueChanged">
            <summary> The method called when data value has been changed. </summary>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoCurrentSensor.DoCurrentChanged">
            <summary> Fires the <c>OnCurrentChanged</c> event. </summary>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoCurrentSensor.#ctor(wclWeDoFramework.wclWeDoHub,System.Byte)">
            <summary> Creates new current sensor device object. </summary>
            <param name="Hub"> The Hub object that owns the device. If this parameter is <c>null</c>
              the <seealso cref="T:wclCommon.wclEInvalidArgument"/> exception raises. </param>
            <param name="ConnectionId"> The device's Connection ID. </param>
            <seealso cref="T:wclWeDoFramework.wclWeDoHub"/>
            <exception cref="T:wclCommon.wclEInvalidArgument"> The exception raises when the <c>Hub</c>
              parameter is <c>null</c>. </exception>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoCurrentSensor.Current">
            <summary> Gets the battery current in mA. </summary>
            <value> The current in milli ampers. </value>
        </member>
        <member name="E:wclWeDoFramework.wclWeDoCurrentSensor.OnCurrentChanged">
            <summary> The event fires when current has been changed. </summary>
            <seealso cref="T:System.EventHandler"/>
        </member>
        <member name="T:wclWeDoFramework.wclWeDoDataFormat">
            <summary> This class contains info detailing how the data received for a given service (typically
              a sensor of some kind) should be interpreted. </summary>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoDataFormat.#ctor(System.Byte,System.Byte,System.Byte,wclWeDoFramework.wclWeDoSensorDataUnit)">
            <summary> Creates a new instance of the Data Format class. </summary>
            <param name="DataSetCount"> The number of data sets. </param>
            <param name="DataSetSize"> The number of bytes in a data set. </param>
            <param name="Mode"> The sensor mode. </param>
            <param name="Unit"> The sensor data unit. </param>
            <seealso cref="T:wclWeDoFramework.wclWeDoSensorDataUnit"/>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoDataFormat.Equals(System.Object)">
            <summary> Compares two Data Formats </summary>
            <param name="obj"> The object to be compared to the current one. </param>
            <returns> <c>True</c> if this data format is equal to <c>Format</c>. <c>False</c> otherwise. </returns>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoDataFormat.GetHashCode">
            <summary> Gets the object hash. </summary>
            <returns> The objects hash. </returns>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoDataFormat.op_Equality(wclWeDoFramework.wclWeDoDataFormat,wclWeDoFramework.wclWeDoDataFormat)">
            <summary> Override the <c>==</c> operator. </summary>
            <param name="a"> First argument. </param>
            <param name="b"> Second argument. </param>
            <returns> <c>True</c> if a == b. <c>False</c> otherwise. </returns>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoDataFormat.op_Inequality(wclWeDoFramework.wclWeDoDataFormat,wclWeDoFramework.wclWeDoDataFormat)">
            <summary> Override the <c>!=</c> operator. </summary>
            <param name="a"> First argument. </param>
            <param name="b"> Second argument. </param>
            <returns> <c>True</c> if a != b. <c>False</c> otherwise. </returns>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoDataFormat.DataSetCount">
            <summary> Gets the data set count. </summary>
            <value> The data set count. </value>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoDataFormat.DataSetSize">
            <summary> Gets the data set size. </summary>
            <value> The data set size. </value>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoDataFormat.Mode">
            <summary> Gets the sensor mode. </summary>
            <value> The sensor mode. </value>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoDataFormat.Unit">
            <summary> Gets the sensor data unit. </summary>
            <value> The sensor data unit. </value>
            <seealso cref="T:wclWeDoFramework.wclWeDoSensorDataUnit"/>
        </member>
        <member name="T:wclWeDoFramework.wclWeDoDeviceInformationService">
            <summary> The class represents the WeDo Device Information service. </summary>
            <seealso cref="T:wclWeDoFramework.wclWeDoService"/>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoDeviceInformationService.Initialize">
            <summary> Initializes the WeDo service. </summary>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoDeviceInformationService.Uninitialize">
            <summary> Uninitializes the WeDo service. </summary>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoDeviceInformationService.#ctor(wclBluetooth.wclGattClient,wclWeDoFramework.wclWeDoHub)">
            <summary> Creates new Device Information service client. </summary>
            <param name="Client"> The <see cref="T:wclBluetooth.wclGattClient"/> object that handles the connection
              to a WeDo device. </param>
            <param name="Hub"> The <see cref="T:wclWeDoFramework.wclWeDoHub"/> object that owns the service. </param>
            <exception cref="T:wclCommon.wclEInvalidArgument"> The exception raises if the <c>Client</c> or <c>Hub</c>
              parameter is <c>null</c>. </exception>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoDeviceInformationService.ReadFirmwareVersion(System.String@)">
            <summary> Reads the firmware version. </summary>
            <param name="Version"> If the method completed with success the parameter contains the
              current device's firmware version. </param>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoDeviceInformationService.ReadHardwareVersion(System.String@)">
            <summary> Reads the hardware version. </summary>
            <param name="Version"> If the method completed with success the parameter contains the
              current device's hardware version. </param>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoDeviceInformationService.ReadSoftwareVersion(System.String@)">
            <summary> Reads the software version. </summary>
            <param name="Version"> If the method completed with success the parameter contains the
              current device's software version. </param>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoDeviceInformationService.ReadManufacturerName(System.String@)">
            <summary> Reads the device's manufacturer name. </summary>
            <param name="Name"> If the method completed with success the parameter contains the
              current device's manufacturer name. </param>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
        </member>
        <member name="T:wclWeDoFramework.wclWeDoHub">
            <summary> The class represents a WeDo Hub hardware. </summary>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoHub.DoConnected(System.Int32)">
            <summary> Fires the <c>OnConnected</c> event. </summary>
            <param name="Error"> If the connection has been established the parameter is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If connection has not been established the
              parameter value is one of the Bluetooth error codes. </param>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoHub.DoDisconnected(System.Int32)">
            <summary> Fires the <c>OnDisconnected</c> event. </summary>
            <param name="Reason"> The disconnection reason code. </param>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoHub.DoButtonStateChanged(System.Boolean)">
            <summary> Fires the <c>OnButtonStateChanged</c> event. </summary>
            <param name="Pressed"> <c>True</c> if the button has been pressed. <c>False</c> if the
              button has been released. </param>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoHub.DoLowVoltageAlert(System.Boolean)">
            <summary> Fires the <c>OnLowVoltageAlert</c> event. </summary>
            <param name="Alert"> <c>True</c> if device runs on low battery. <c>False</c> otherwise. </param>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoHub.DoDeviceAttached(wclWeDoFramework.wclWeDoIo)">
            <summary> Fires the <c>OnDeviceAttached</c> event. </summary>
            /// <param name="Device"> The Input/Output device object. </param>
            <seealso cref="T:wclWeDoFramework.wclWeDoIo"/>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoHub.DoDeviceDetached(wclWeDoFramework.wclWeDoIo)">
            <summary> Fires the <c>OnDeviceDetached</c> event. </summary>
            /// <param name="Device"> The Input/Output device object. </param>
            <seealso cref="T:wclWeDoFramework.wclWeDoIo"/>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoHub.#ctor">
            <summary> Creates new WeDo Client. </summary>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoHub.Connect(wclBluetooth.wclBluetoothRadio,System.Int64)">
            <summary> Connects to a selected WeDo Hub. </summary>
            <param name="Radio"> The <see cref="T:wclBluetooth.wclBluetoothRadio" /> object that should be used
              for executing Bluetooth LE connection. </param>
            <param name="Address"> The WeDo Hub MAC address. </param>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="M:wclWeDoFramework.wclWeDoHub.Disconnect">
            <summary> Disconnects from WeDo Hub. </summary>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoHub.ReadDeviceName(System.String@)">
            <summary> Reads the current device name. </summary>
            <param name="Name"> If the method completed with success the parameter contains the
              current device name. </param>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoHub.WriteDeviceName(System.String)">
            <summary> Writes new device name. </summary>
            <param name="Name"> The new device name. </param>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoHub.DeviceInformation">
            <summary> Gets the Hub device information service object. </summary>
            <value> The Hub device information service object. </value>
            <seealso cref="T:wclWeDoFramework.wclWeDoDeviceInformationService"/>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoHub.BatteryLevel">
            <summary> Gets the battery level service object. </summary>
            <value> The battery level service object. </value>
            <seealso cref="T:wclWeDoFramework.wclWeDoBatteryLevelService"/>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoHub.Address">
            <summary> Gets the connected WeDo Hub Address. </summary>
            <value> The Hub MAC address. </value>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoHub.Connected">
            <summary> Gets connected status. </summary>
            <value> <c>true</c> if connected to WeDo Hub. </value>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoHub.ClientState">
            <summary> Gets internal GATT client state. </summary>
            <value> The internal GATT client state. </value>
            <seealso cref="T:wclCommunication.wclClientState" />
        </member>
        <member name="P:wclWeDoFramework.wclWeDoHub.IoDevices">
            <summary> Gets the list of the attached IO devices. </summary>
            <value> The list of the attached IO devices. </value>
            <seealso cref="T:wclWeDoFramework.wclWeDoIo"/>
        </member>
        <member name="E:wclWeDoFramework.wclWeDoHub.OnConnected">
            <summary> The event fires when connection to a WeDo Hub
              has been established. </summary>
            <seealso cref="T:wclCommunication.wclClientConnectionConnectEvent" />
        </member>
        <member name="E:wclWeDoFramework.wclWeDoHub.OnDisconnected">
            <summary> The event fires when WeDo Hub has been disconnected. </summary>
            <seealso cref="T:wclCommunication.wclClientConnectionDisconnectEvent" />
        </member>
        <member name="E:wclWeDoFramework.wclWeDoHub.OnButtonStateChanged">
            <summary> The event fires when button state has been changed. </summary>
            <seealso cref="T:wclWeDoFramework.wclWeDoHubButtonStateChangedEvent"/>
        </member>
        <member name="E:wclWeDoFramework.wclWeDoHub.OnLowVoltageAlert">
            <summary> The event fires when device runs on low battery. </summary>
            <seealso cref="T:wclWeDoFramework.wclWeDoHubLowVolatgeAlertEvent"/>
        </member>
        <member name="E:wclWeDoFramework.wclWeDoHub.OnDeviceAttached">
            <summary> The event fires when new IO device has been attached. </summary>
            <seealso cref="T:wclWeDoFramework.wclWeDoDeviceStateChangedEvent"/>
        </member>
        <member name="E:wclWeDoFramework.wclWeDoHub.OnDeviceDetached">
            <summary> The event fires when an existing IO device has been detached. </summary>
            <seealso cref="T:wclWeDoFramework.wclWeDoDeviceStateChangedEvent"/>
        </member>
        <member name="T:wclWeDoFramework.wclWeDoHubButtonStateChangedEvent">
            <summary> The <c>OnButtonStateChanged</c> event handler prototype. </summary>
            <param name="Sender"> The object that fires the event. </param>
            <param name="Pressed"> The button's state. <c>True</c> if button has been pressed.
              <c>False</c> if button has been released. </param>
        </member>
        <member name="T:wclWeDoFramework.wclWeDoHubLowVolatgeAlertEvent">
            <summary> The <c>OnLowVoltageAlert</c> event handler prototype. </summary>
            <param name="Sender"> The object that fires the event. </param>
            <param name="Alert"> <c>True</c> if device runs on low battery. <c>False</c> otherwise. </param>
        </member>
        <member name="T:wclWeDoFramework.wclWeDoDeviceStateChangedEvent">
            <summary> The <c>OnDeviceAttached</c> and <c>OnDeviceDetached</c> events handler prototype. </summary>
            <param name="Sender"> The object that fires the event. </param>
            <param name="Device"> The Input/Output device object. </param>
            <seealso cref="T:wclWeDoFramework.wclWeDoIo"/>
        </member>
        <member name="T:wclWeDoFramework.wclWeDoHubService">
            <summary> The class represents the WeDo Hub service. </summary>
            <seealso cref="T:wclWeDoFramework.wclWeDoService"/>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoHubService.Initialize">
            <summary> Initializes the WeDo service. </summary>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoHubService.Uninitialize">
            <summary> Uninitializes the WeDo service. </summary>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoHubService.CharacteristicChanged(System.UInt16,System.Byte[])">
            <summary> This method called internally by the <see cref="T:wclWeDoFramework.wclWeDoHub"/>
              to notify about characteristic changes. A derived class may override this method
              to check for required characteristic changes. </summary>
            <param name="Handle"> The characteristic handle. </param>
            <param name="Value"> The new characteristic value. </param>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoHubService.DoButtonStateChanged(System.Boolean)">
            <summary> Fires the <c>OnButtonStateChanged</c> event. </summary>
            <param name="Pressed"> <c>True</c> if the button has been pressed. <c>False</c> if the
              button has been released. </param>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoHubService.DoLowVoltageAlert(System.Boolean)">
            <summary> Fires the <c>OnLowVoltageAlert</c> event. </summary>
            <param name="Alert"> <c>True</c> if device runs on low battery. <c>False</c> otherwise. </param>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoHubService.DoDeviceAttached(wclWeDoFramework.wclWeDoIo)">
            <summary> Fires the <c>OnDeviceAttached</c> event. </summary>
            <param name="Device"> The IO device object. </param>
            <seealso cref="T:wclWeDoFramework.wclWeDoIo"/>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoHubService.DoDeviceDetached(System.Byte)">
            <summary> Fires the <c>OnDeviceDetached</c> event. </summary>
            <param name="ConnectionId"> The device connection ID. </param>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoHubService.#ctor(wclBluetooth.wclGattClient,wclWeDoFramework.wclWeDoHub)">
            <summary> Creates new IO service client. </summary>
            <param name="Client"> The <see cref="T:wclBluetooth.wclGattClient"/> object that handles the connection
              to a WeDo device. </param>
            <param name="Hub"> The <see cref="T:wclWeDoFramework.wclWeDoHub"/> object that owns the service. </param>
            <exception cref="T:wclCommon.wclEInvalidArgument"> The exception raises if the <c>Client</c> or <c>Hub</c>
              parameter is <c>null</c>. </exception>
        </member>
        <member name="T:wclWeDoFramework.wclWeDoInputFormat">
            <summary> This class describes a configuration of an Input (sensor). At any time a sensor can be in just one mode,
              and the details of this mode is captured by this structure. </summary>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoInputFormat.#ctor(System.Byte,wclWeDoFramework.wclWeDoIoDeviceType,System.Byte,System.UInt32,wclWeDoFramework.wclWeDoSensorDataUnit,System.Boolean,System.Byte,System.Byte)">
            <summary> Create a new instance of <c>wclWeDoInputFormat</c> class. </summary>
            <param name="ConnectionId"> The connection ID of the service.</param>
            <param name="DeviceType"> The type of the device. </param>
            <param name="Mode"> The mode of the device. </param>
            <param name="Interval"> The notifications interval. </param>
            <param name="Unit"> The unit the sensor should return values in. </param>
            <param name="NotificationsEnabled"> <c>True</c> if the device should send updates when the value changes. </param>
            <param name="Revision"> The Input Format revision. </param>
            <param name="NumberOfBytes"> The number of bytes in device's data packet. </param>
            <seealso cref="T:wclWeDoFramework.wclWeDoIoDeviceType"/>
            <seealso cref="T:wclWeDoFramework.wclWeDoSensorDataUnit"/>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoInputFormat.Equals(System.Object)">
            <summary> Compares two Input Formats. </summary>
            <param name="obj"> The object to be compare with current one. </param>
            <returns> <c>True</c> if the Input Formats are equals. <c>False</c> otherwise. </returns>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoInputFormat.GetHashCode">
            <summary> Gets the object hash. </summary>
            <returns> The objects hash. </returns>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoInputFormat.op_Equality(wclWeDoFramework.wclWeDoInputFormat,wclWeDoFramework.wclWeDoInputFormat)">
            <summary> Override the <c>==</c> operator. </summary>
            <param name="a"> First argument. </param>
            <param name="b"> Second argument. </param>
            <returns> <c>True</c> if a == b. <c>False</c> otherwise. </returns>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoInputFormat.op_Inequality(wclWeDoFramework.wclWeDoInputFormat,wclWeDoFramework.wclWeDoInputFormat)">
            <summary> Override the <c>!=</c> operator. </summary>
            <param name="a"> First argument. </param>
            <param name="b"> Second argument. </param>
            <returns> <c>True</c> if a != b. <c>False</c> otherwise. </returns>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoInputFormat.ConnectionId">
            <summary> The Connect ID of the corresponding device. </summary>
            <value> The connect ID. </value>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoInputFormat.DeviceType">
            <summary> Gets the device type of the Input Format. </summary>
            <value> The device type of the corresponding service. </value>
            <seealso cref="T:wclWeDoFramework.wclWeDoIoDeviceType"/>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoInputFormat.Interval">
            <summary> Gets The notifications interval. </summary>
            <value> The notifications interval. </value>
            <remarks> When notifications are enabled the device sends notifications if the value has change.
              The interval indicates how fast/often updates will be send </remarks>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoInputFormat.Mode">
            <summary> Gets the Input mode. </summary>
            <value> The mode of the Input. </value>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoInputFormat.NotificationsEnabled">
            <summary> Gets the notifications state. </summary>
            <value> <c>True</c> if new values are send whenever the value of the Input changes beyond
              delta interval. </value>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoInputFormat.NumberOfBytes">
            <summary> Gets the number of bytes to be expected in the Input data payload (set by the Device). </summary>
            <value> The number of bytes. </value>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoInputFormat.Revision">
            <summary> Gets the Input Format revision. </summary>
            <value> The revision of the Input Format. </value>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoInputFormat.Unit">
            <summary> Gets the value unit. </summary>
            <value> The unit of the values. </value>
            <seealso cref="T:wclWeDoFramework.wclWeDoSensorDataUnit"/>
        </member>
        <member name="T:wclWeDoFramework.wclWeDoIoDeviceType">
            <summary> Represents a type of an attached IO (motor, sensor, etc). </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoIoDeviceType.iodMotor">
            <summary> A Motor. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoIoDeviceType.iodVoltageSensor">
            <summary> A Voltage Sensor. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoIoDeviceType.iodCurrentSensor">
            <summary> A Current Sensor. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoIoDeviceType.iodPiezo">
            <summary> A Piezo Tone player. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoIoDeviceType.iodRgb">
            <summary> An RGB light. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoIoDeviceType.iodTiltSensor">
            <summary> A Tilt Sensor. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoIoDeviceType.iodMotionSensor">
            <summary> A Motion Sensor (aka. Detect Sensor). </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoIoDeviceType.iodUnknown">
            <summary> A type is unknown. </summary>
        </member>
        <member name="T:wclWeDoFramework.wclWeDoVersion">
            <summary> The structure describes the device version number. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoVersion.BugFixVersion">
            <summary> The bug fix version number. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoVersion.BuildNumber">
            <summary> The build number. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoVersion.MajorVersion">
            <summary> The build number. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoVersion.MinorVersion">
            <summary> The major version number. </summary>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoVersion.ToString">
            <summary> A formatted string representation of the version. </summary>
            <returns> A formatted string representation of the version </returns>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoVersion.Equals(System.Object)">
            <summary> Compares versions. </summary>
            <param name="obj"> The object to compare to. </param>
            <returns> <c>True</c> if objects are equal. </returns>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoVersion.GetHashCode">
            <summary> Gets the object hash. </summary>
            <returns> The objects hash. </returns>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoVersion.op_Equality(wclWeDoFramework.wclWeDoVersion,wclWeDoFramework.wclWeDoVersion)">
            <summary> Override the <c>==</c> operator. </summary>
            <param name="a"> First argument. </param>
            <param name="b"> Second argument. </param>
            <returns> <c>True</c> if a == b. <c>False</c> otherwise. </returns>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoVersion.op_Inequality(wclWeDoFramework.wclWeDoVersion,wclWeDoFramework.wclWeDoVersion)">
            <summary> Override the <c>!==</c> operator. </summary>
            <param name="a"> First argument. </param>
            <param name="b"> Second argument. </param>
            <returns> <c>True</c> if a != b. <c>False</c> otherwise. </returns>
        </member>
        <member name="T:wclWeDoFramework.wclWeDoIo">
            <summary> The class represets an attached Input/Outpout device. </summary>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoIo.WriteData(System.Byte[])">
            <summary> Sends data to the IO service. </summary>
            <param name="Data"> The data to write. </param>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoIo.SendReadValueRequest">
            <summary> If the notifications is disabled for the service in the Input Format you will have to use
              this method to request an updated value for the service. </summary>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoIo.Reset">
            <summary> Sends a reset command to the Device. </summary>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoIo.AddValidDataFormat(wclWeDoFramework.wclWeDoDataFormat)">
            <summary> Adds a new valid data format. </summary>
            <param name="Format"> The data format to add. </param>
            <seealso cref="T:wclWeDoFramework.wclWeDoDataFormat"/>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoIo.RemoveValidDataFormat(wclWeDoFramework.wclWeDoDataFormat)">
            <summary> Removes a valid data format. </summary>
            <param name="Format"> The data format to remove. </param>
            <seealso cref="T:wclWeDoFramework.wclWeDoDataFormat"/>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoIo.SendInputFormat(wclWeDoFramework.wclWeDoInputFormat)">
            <summary> Send an updated input format for this service to the device. </summary>
            <param name="Format"> New input format. </param>
            <seelso cref="T:wclWeDoFramework.wclWeDoInputFormat"/>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoIo.SetInputFormatMode(System.Byte)">
            <summary> Changes mode of the Input Format. </summary>
            <param name="Mode"> The Input Format mode. </param>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoIo.InputFormatChanged(wclWeDoFramework.wclWeDoInputFormat)">
            <summary> The method called when Input Format has been changed. </summary>
            <param name="OldFormat"> The old Input Format. </param>
            <remarks> A derived class must override this method to get notifications about
              format changes. </remarks>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoIo.ValueChanged">
            <summary> The method called when data value has been changed. </summary>
            <remarks> A derived class must override this method to get notifications about
              value changes. </remarks>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoIo.AsFloat">
            <summary> Gets current sensor's value as <c>Float</c> number. </summary>
            <value> The float sensors value. </value>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoIo.AsInteger">
            <summary> Gets the current sensor's value as <c>Integer</c> number. </summary>
            <value> The integer sensor's value. </value>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoIo.DataFormats">
            <summary> Gets the list of supported Data Formats. </summary>
            <value> The list of supported Data Formats. </value>
            <seealso cref="T:wclWeDoFramework.wclWeDoDataFormat"/>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoIo.DefaultInputFormat">
            <summary> Gets and sets the default input format. </summary>
            <value> The default input format. </value>
            <seealso cref="T:wclWeDoFramework.wclWeDoInputFormat"/>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoIo.InputFormat">
            <summary> Gets the sensor Input Format. </summary>
            <value> The Input Format. </value>
            <seealso cref="T:wclWeDoFramework.wclWeDoInputFormat"/>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoIo.InputFormatMode">
            <summary> Gets the Input Format mode. </summary>
            <value> The Input Format Mode. </value>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoIo.NumbersFromValueData">
            <summary> Gets alist with one byte[] per number received. </summary>
            <value> The list of bytes array. </value>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoIo.Value">
            <summary> Gets the current sensors value. </summary>
            <value> The sensors value as raw bytes array. </value>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoIo.#ctor(wclWeDoFramework.wclWeDoHub,System.Byte)">
            <summary> Creates new IO device object. </summary>
            <param name="Hub"> The Hub object that owns the device. If this parameter is <c>null</c>
              the <seealso cref="T:wclCommon.wclEInvalidArgument"/> exception raises. </param>
            <param name="ConnectionId"> The device's Connection ID. </param>
            <seealso cref="T:wclWeDoFramework.wclWeDoHub"/>
            <exception cref="T:wclCommon.wclEInvalidArgument"> The exception raises when the <c>Hub</c>
              parameter is <c>null</c>. </exception>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoIo.Attached">
            <summary> Gets the IO device state. </summary>
            <value> <c>True</c> if the device is attached. <c>False</c> if the device is detached. </value>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoIo.ConnectionId">
            <summary> Gets the IO connection ID. </summary>
            <value> The IO connection ID. </value>
            <remarks> It is guarateed that the connection ID is unique. </remarks>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoIo.DeviceType">
            <sumnmary> Gets the device represented by this object. </sumnmary>
            <value> The IO device type. </value>
            <seealso cref="T:wclWeDoFramework.wclWeDoIoDeviceType"/>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoIo.FirmwareVersion">
            <summary> Gets the IO device firmware version. </summary>
            <value> The IO device firmware version. </value>
            <seealso cref="T:wclWeDoFramework.wclWeDoVersion"/>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoIo.HardwareVersion">
            <summary> Gets the IO device hardware version. </summary>
            <value> The IO device hardware version. </value>
            <seealso cref="T:wclWeDoFramework.wclWeDoVersion"/>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoIo.Internal">
            <summary> Gets the IO type represented by this object. </summary>
            <value> <c>True</c> if the IO device is internal. <c>False</c> if the IO device is external. </value>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoIo.Hub">
            <summary> Gets the WeDo Hub object that owns the IO device. </summary>
            <value> The WeDo Hub object. </value>
            <seealso cref="T:wclWeDoFramework.wclWeDoHub"/>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoIo.PortId">
            <summary> The index of the port on the Hub the IO is attached to.  </summary>
        </member>
        <member name="T:wclWeDoFramework.wclWeDoIoService">
            <summary> The class represents the WeDo IO service. </summary>
            <seealso cref="T:wclWeDoFramework.wclWeDoService"/>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoIoService.Initialize">
            <summary> Initializes the WeDo service. </summary>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoIoService.Uninitialize">
            <summary> Uninitializes the WeDo service. </summary>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoIoService.CharacteristicChanged(System.UInt16,System.Byte[])">
            <summary> This method called internally by the <see cref="T:wclWeDoFramework.wclWeDoHub"/>
              to notify about characteristic changes. A derived class may override this method
              to check for required characteristic changes. </summary>
            <param name="Handle"> The characteristic handle. </param>
            <param name="Value"> The new characteristic value. </param>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoIoService.#ctor(wclBluetooth.wclGattClient,wclWeDoFramework.wclWeDoHub)">
            <summary> Creates new IO service client. </summary>
            <param name="Client"> The <see cref="T:wclBluetooth.wclGattClient"/> object that handles the connection
              to a WeDo device. </param>
            <param name="Hub"> The <see cref="T:wclWeDoFramework.wclWeDoHub"/> object that owns the service. </param>
            <exception cref="T:wclCommon.wclEInvalidArgument"> The exception raises if the <c>Client</c> or <c>Hub</c>
              parameter is <c>null</c>. </exception>
        </member>
        <member name="T:wclWeDoFramework.wclWeDoMotionSensorMode">
            <summary> Supported modes for the motion sensor. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoMotionSensorMode.mmDetect">
            <summary> Detect mode - produces value that reflect the relative distance from the sensor
              to objects in front of it. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoMotionSensorMode.mmCount">
            <summary> Count mode - produces values that reflect how many times the sensor has been
              activated. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoMotionSensorMode.mmUnknown">
            <summary> Unknown (unsupported) mode. </summary>
        </member>
        <member name="T:wclWeDoFramework.wclWeDoMotionSensor">
            <summary> The class represents a WeDo Motion Sensor. </summary>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoMotionSensor.ValueChanged">
            <summary> Fires the <c>OnVoltageChanged</c> event. </summary>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoMotionSensor.DoCountChanged">
            <summary> Fires the <c>OnCountChanged</c> event. </summary>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoMotionSensor.DoDistanceChanged">
            <summary> Fires the <c>OnDistanceChanged</c> event. </summary>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoMotionSensor.#ctor(wclWeDoFramework.wclWeDoHub,System.Byte)">
            <summary> Creates new motion sensor device object. </summary>
            <param name="Hub"> The Hub object that owns the device. If this parameter is <c>null</c>
              the <seealso cref="T:wclCommon.wclEInvalidArgument"/> exception raises. </param>
            <param name="ConnectionId"> The device's Connection ID. </param>
            <seealso cref="T:wclWeDoFramework.wclWeDoHub"/>
            <exception cref="T:wclCommon.wclEInvalidArgument"> The exception raises when the <c>Hub</c>
              parameter is <c>null</c>. </exception>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoMotionSensor.SetMode(wclWeDoFramework.wclWeDoMotionSensorMode)">
            <summary> Sets the motion sensor mode. </summary>
            <param name="Mode"> The motion sensor mode. </param>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
            <seealso cref="T:wclWeDoFramework.wclWeDoMotionSensorMode"/>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoMotionSensor.Count">
            <summary> Gets the most recent count reading from the sensor. </summary>
            <value> The detections count. </value>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoMotionSensor.Distance">
            <summary> Gets the most recent distance reading from the sensor. </summary>
            <value> The distance. </value>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoMotionSensor.Mode">
            <summary> Gets the current mode of the motion sensor. </summary>
            <value> The sensor mode. </value>
            <seealso cref="T:wclWeDoFramework.wclWeDoMotionSensorMode"/>
        </member>
        <member name="E:wclWeDoFramework.wclWeDoMotionSensor.OnCountChanged">
            <summary> The event fires when the counter has been changed. </summary>
            <seealso cref="T:System.EventHandler"/>
        </member>
        <member name="E:wclWeDoFramework.wclWeDoMotionSensor.OnDistanceChanged">
            <summary> The event fires when distance has been changed. </summary>
            <seealso cref="T:System.EventHandler"/>
        </member>
        <member name="T:wclWeDoFramework.wclWeDoMotorDirection">
            <summary> The motor's direction. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoMotorDirection.mdDrifting">
            <summary> Drifting (Floating). </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoMotorDirection.mdLeft">
            <summary> Running left. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoMotorDirection.mdRight">
            <summary> Running right. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoMotorDirection.mdBraking">
            <summary> Brake. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoMotorDirection.mdUnknown">
            <summary> Unknwon. </summary>
        </member>
        <member name="T:wclWeDoFramework.wclWeDoMotor">
            <summary> The class represents a WeDo motor. </summary>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoMotor.#ctor(wclWeDoFramework.wclWeDoHub,System.Byte)">
            <summary> Creates new motor class object. </summary>
            <param name="Hub"> The Hub object that owns the device. If this parameter is <c>null</c>
              the <seealso cref="T:wclCommon.wclEInvalidArgument"/> exception raises. </param>
            <param name="ConnectionId"> The device's Connection ID. </param>
            <seealso cref="T:wclWeDoFramework.wclWeDoHub"/>
            <exception cref="T:wclCommon.wclEInvalidArgument"> The exception raises when the <c>Hub</c>
              parameter is <c>null</c>. </exception>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoMotor.Brake">
            <summary> Sends a command to stop (brake) the motor. </summary>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoMotor.Drift">
            <summary> Sends a command to stop (drift/float) the motor. </summary>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoMotor.Run(wclWeDoFramework.wclWeDoMotorDirection,System.Byte)">
            <summary> Sends a command to run the motor at a given <c>Power</c> in a given <c>Direction</c>.
              The minimum speed is 0 and the maximum speed is 100. </summary>
            <param name="Direction"> The direction to run the motor. </param>
            <param name="Power"> The power to run the motor with. </param>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
            <seealso cref="T:wclWeDoFramework.wclWeDoMotorDirection"/>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoMotor.Direction">
            <summary> Gets the current running direction of the motor. </summary>
            <value> Teh motor direction. </value>
            <seealso cref="T:wclWeDoFramework.wclWeDoMotorDirection"/>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoMotor.IsBraking">
            <summary> Gets the motor's braking state. </summary>
            <value> <c>True</c> if the motor is in brake state. <c>False</c> otheerwise. </value>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoMotor.IsDrifting">
            <summary> Gets the motor's drifting state. </summary>
            <value> <c>True</c> if the motor is currently drifting or floating.
              When floating the motor axis can be turned without resistance. </value>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoMotor.Power">
            <summary> Gets the power the motor is currently running with (0 if braking or drifting). </summary>
            <value> Teh current motor power. </value>
        </member>
        <member name="T:wclWeDoFramework.wclWeDoPiezoNote">
            <summary> Tones that can be played using the <see cref="T:wclWeDoFramework.wclWeDoPieazo"/> </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoPiezoNote.pnC">
            <summary> C </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoPiezoNote.pnCis">
            <summary> C# </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoPiezoNote.pnD">
            <summary> D </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoPiezoNote.pnDis">
            <summary> D# </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoPiezoNote.pnE">
            <summary> E </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoPiezoNote.pnF">
            <summary> F </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoPiezoNote.pnFis">
            <summary> F# </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoPiezoNote.pnG">
            <summary> G </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoPiezoNote.pnGis">
            <summary> G# </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoPiezoNote.pnA">
            <summary> A </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoPiezoNote.pnAis">
            <summary> A# </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoPiezoNote.pnB">
            <summary> B </summary>
        </member>
        <member name="T:wclWeDoFramework.wclWeDoPieazo">
            <summary> The class represents a Piezo tone player device. </summary>
            <seealso cref="T:wclWeDoFramework.wclWeDoIo"/>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoPieazo.#ctor(wclWeDoFramework.wclWeDoHub,System.Byte)">
            <summary> Creates new Piezo device object. </summary>
            <param name="Hub"> The Hub object that owns the device. If this parameter is <c>null</c>
              the <seealso cref="T:wclCommon.wclEInvalidArgument"/> exception raises. </param>
            <param name="ConnectionId"> The device's Connection ID. </param>
            <seealso cref="T:wclWeDoFramework.wclWeDoHub"/>
            <exception cref="T:wclCommon.wclEInvalidArgument"> The exception raises when the <c>Hub</c>
              parameter is <c>null</c>. </exception>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoPieazo.PlayTone(System.UInt16,System.UInt16)">
            <summary> Plays a tone with a given frequency for the given duration in ms. </summary>
            <param name="Frequency"> The frequency to play (max allowed frequency is 1500). </param>
            <param name="Duration"> The duration to play (max supported is 65535 milli seconds). </param>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoPieazo.PlayNote(wclWeDoFramework.wclWeDoPiezoNote,System.Byte,System.UInt16)">
            <summary> Plays a note. The highest supported node is F# in 6th octave. </summary>
            <param name="Note"> The note to play. </param>
            <param name="Octave"> The octave in which to play the node. </param>
            <param name="Duration"> The duration to play (max supported is 65535 milli seconds). </param>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
            <seealso cref="T:wclWeDoFramework.wclWeDoPiezoNote"/>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoPieazo.StopPlaying">
            <summary> Stop playing any currently playing tone. </summary>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
        </member>
        <member name="T:wclWeDoFramework.wclWeDoRgbLightMode">
            <summary> Mode of the RGB light device. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoRgbLightMode.lmDiscrete">
            <summary> Discrete mode allows selecting a color index from a set of predefined colors. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoRgbLightMode.lmAbsolute">
            <summary> Absolute mode allows selecting any color by specifying its RGB component values. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoRgbLightMode.lmUnknown">
            <summary> Unknown (unsupported) mode. </summary>
        </member>
        <member name="T:wclWeDoFramework.wclWeDoColor">
            <summary> A Lego WeDo color indexes. </summary>
            <remarks> This enumration is used in <c>Absolute</c> color mode. </remarks>
            <seealso cref="T:wclWeDoFramework.wclWeDoRgbLightMode"/>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoColor.clBlack">
            <summary> Black (none) color. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoColor.clPink">
            <summary> Pink color. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoColor.clPurple">
            <summary> Purple color. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoColor.clBlue">
            <summary> Blue color. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoColor.clSkyBlue">
            <summary> Sky blue color. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoColor.clTeal">
            <summary> Teal color. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoColor.clGreen">
            <summary> Green color. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoColor.clYellow">
            <summary> Yellow color. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoColor.clOrange">
            <summary> Orange color. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoColor.clRed">
            <summary> Red color. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoColor.clWhite">
            <summary> White color. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoColor.clUnknown">
            <summary> Unknwon color index. </summary>
        </member>
        <member name="T:wclWeDoFramework.wclWeDoRgbLight">
            <summary> The class represents a HUB RGB light. </summary>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoRgbLight.InputFormatChanged(wclWeDoFramework.wclWeDoInputFormat)">
            <summary> The method called when Input Format has been changed. </summary>
            <param name="OldFormat"> The old Input Format. </param>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoRgbLight.ValueChanged">
            <summary> The method called when data value has been changed. </summary>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoRgbLight.DoColorChanged">
            <summary> Fires the <c>OnColorChanged</c> event. </summary>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoRgbLight.DoModeChanged">
            <summary> Fires the <c>OnModeChanged</c> event. </summary>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoRgbLight.#ctor(wclWeDoFramework.wclWeDoHub,System.Byte)">
            <summary> Creates new RGB light device object. </summary>
            <param name="Hub"> The Hub object that owns the device. If this parameter is <c>null</c>
              the <seealso cref="T:wclCommon.wclEInvalidArgument"/> exception raises. </param>
            <param name="ConnectionId"> The device's Connection ID. </param>
            <seealso cref="T:wclWeDoFramework.wclWeDoHub"/>
            <exception cref="T:wclCommon.wclEInvalidArgument"> The exception raises when the <c>Hub</c>
              parameter is <c>null</c>. </exception>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoRgbLight.SwitchOff">
            <summary> Switch off the RGB light on the device. </summary>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoRgbLight.SwitchToDefaultColor">
            <summary> Switches to the default Color (i.e. the same color as the device has right after a successful connection has
              been established). </summary>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoRgbLight.SetColor(System.Windows.Media.Color)">
            <summary> Sets the RGB color. </summary>
            <param name="Rgb"> The RGB color. </param>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
            <seealso cref="T:System.Windows.Media.Color"/>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoRgbLight.SetColorIndex(wclWeDoFramework.wclWeDoColor)">
            <summary> Sets the index of the currently selected color (discrete mode). </summary>
            <param name="Index"> The color index. </param>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoRgbLight.SetMode(wclWeDoFramework.wclWeDoRgbLightMode)">
            <summary> Sets the mode of the RGB light. </summary>
            <param name="Mode"> The RGB lite mode. </param>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
            <seealso cref="T:wclWeDoFramework.wclWeDoRgbLightMode"/>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoRgbLight.Color">
            <summary> Gets the color of the RGB light on the device (absolute mode). </summary>
            <value> The RGB color. </value>
            <seealso cref="T:System.Windows.Media.Color"/>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoRgbLight.ColorIndex">
            <summary> Gets the index of the currently selected color (discrete mode). </summary>
            <value> The color index. </value>
            <seealso cref="T:wclWeDoFramework.wclWeDoColor"/>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoRgbLight.DefaultColor">
            <summary> Gets the default color of the RGB light (absolute mode). </summary>
            <value> The default color. </value>
            <seealso cref="T:System.Windows.Media.Color"/>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoRgbLight.DefaultColorIndex">
            <summary> Gets the default color index of the RGB, when in the discrete mode. </summary>
            <value> The default color index. </value>
            <seealso cref="T:wclWeDoFramework.wclWeDoColor"/>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoRgbLight.Mode">
            <summary> Gets the mode of the RGB light. </summary>
            <value> The RGB light device mode. </value>
            <seealso cref="T:wclWeDoFramework.wclWeDoRgbLightMode"/>
        </member>
        <member name="E:wclWeDoFramework.wclWeDoRgbLight.OnColorChanged">
            <summary> The event fires when color has been changed. </summary>
            <seealso cref="T:System.EventHandler"/>
        </member>
        <member name="E:wclWeDoFramework.wclWeDoRgbLight.OnModeChanged">
            <summary> The event fired when the RGB LED mode has been changed. </summary>
            <seealso cref="T:System.EventHandler"/>
        </member>
        <member name="T:wclWeDoFramework.wclWeDoSensorDataUnit">
            <summary> The sensor's data unit. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoSensorDataUnit.suRaw">
            <summary> Raw. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoSensorDataUnit.suPercentage">
            <summary> Percentage. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoSensorDataUnit.suSi">
            <summary> SI. </summary>
        </member>
        <member name="F:wclWeDoFramework.wclWeDoSensorDataUnit.suUnknown">
            <summary> Unknown. </summary>
        </member>
        <member name="T:wclWeDoFramework.wclWeDoService">
            <summary> The base class for all WeDo services. </summary>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoService.ToGuid(wclBluetooth.wclGattUuid)">
            <summary> Converts <see cref="T:wclBluetooth.wclGattUuid"/> type to standard system <see cref="T:System.Guid"/>. </summary>
            <param name="Uuid"> The <see cref="T:wclBluetooth.wclGattUuid"/> that should be converted. </param>
            <returns> The <see cref="T:System.Guid"/> composed from the <c>Uuid</c>. </returns>
            <seealso cref="T:System.Guid"/>
            <seealso cref="T:wclBluetooth.wclGattUuid"/>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoService.CompareGuid(wclBluetooth.wclGattUuid,System.Guid)">
            <summary> Compares the attribute's <see cref="T:wclBluetooth.wclGattUuid"/> with given standard
              system <see cref="T:System.Guid"/>. </summary>
            <param name="GattUuid"> The attribute's <see cref="T:wclBluetooth.wclGattUuid"/>. </param>
            <param name="Uuid">The system <see cref="T:System.Guid"/>. </param>
            <returns> Returns <c>true</c> if the attribute's UUID is equals to the GUID.
              Returns <c>false</c> otherwise. </returns>
            <seealso cref="T:System.Guid"/>
            <seealso cref="T:wclBluetooth.wclGattUuid"/>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoService.FindService(System.Guid,System.Nullable{wclBluetooth.wclGattService}@)">
            <summary> Finds the service with given UUID. </summary>
            <param name="Uuid"> The service's UUID. </param>
            <param name="Service"> If the method completed with success the parameter
              contains found service. Otherwise the parameter is <c>null</c>. </param>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
            <seealso cref="T:System.Guid"/>
            <seealso cref="T:wclBluetooth.wclGattService"/>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoService.FindCharactersitc(System.Guid,System.Nullable{wclBluetooth.wclGattService},System.Nullable{wclBluetooth.wclGattCharacteristic}@)">
            <summary> Finds the characteristic with given UUID. </summary>
            <param name="Uuid"> The characteristic's UUID. </param>
            <param name="Service"> The GATT service that should contain the required
              characteristic. </param>
            <param name="Characteristic"> If the method completed with success the
              parameter contains the found characteristic. Otherwise the parameter is <c>null</c>. </param>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
            <seealso cref="T:System.Guid"/>
            <seealso cref="T:wclBluetooth.wclGattService"/>
            <seealso cref="T:wclBluetooth.wclGattCharacteristic"/>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoService.SubscribeForNotifications(System.Nullable{wclBluetooth.wclGattCharacteristic})">
            <summary> Subscribes to the changes notifications of the given characteristic. </summary>
            <param name="Characteristic"> The characteristic. </param>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
            <seealso cref="T:wclBluetooth.wclGattCharacteristic"/>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoService.UnsubscribeFromNotifications(System.Nullable{wclBluetooth.wclGattCharacteristic})">
            <summary> Unsubscribes from the changes notifications of the given characteristic. </summary>
            <seealso cref="T:wclBluetooth.wclGattCharacteristic"/>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoService.ReadStringValue(System.Nullable{wclBluetooth.wclGattCharacteristic},System.String@)">
            <summary> Reads string value from the given characteristic. </summary>
            <param name="Characteristic"> The GATT characteristic. </param>
            <param name="Value"> If the method completed with success contains the read value. </param>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoService.ReadByteValue(System.Nullable{wclBluetooth.wclGattCharacteristic},System.Byte@)">
            <summary> Reads byte value from the given characteristic. </summary>
            <param name="Characteristic"> The GATT characteristic. </param>
            <param name="Value"> If the method completed with success contains the read value. </param>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoService.Initialize">
            <summary> Initializes the WeDo service. </summary>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
            <remarks> A derived clases must override this method to initialize all required
              parameters to work with WeDo service. </remarks>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoService.Uninitialize">
            <summary> Uninitializes the WeDo service. </summary>
            <remarks> A derived clases must override this method to cleanup allocated resources. </remarks>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoService.Client">
            <summary> Gets the GATT client object. </summary>
            <value> The GATT client object. </value>
            <seealso cref="T:wclBluetooth.wclGattClient"/>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoService.CharacteristicChanged(System.UInt16,System.Byte[])">
            <summary> This method called internally by the <see cref="T:wclWeDoFramework.wclWeDoHub"/>
              to notify about characteristic changes. A derived class may override this method
              to check for required characteristic changes. </summary>
            <param name="Handle"> The characteristic handle. </param>
            <param name="Value"> The new characteristic value. </param>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoService.#ctor(wclBluetooth.wclGattClient,wclWeDoFramework.wclWeDoHub)">
            <summary> Creates new WeDo Service Client object. </summary>
            <param name="Client"> The <see cref="T:wclBluetooth.wclGattClient"/> object that handles the connection
              to a WeDo device. </param>
            <param name="Hub"> The <see cref="T:wclWeDoFramework.wclWeDoHub"/> object that owns the service. </param>
            <exception cref="T:wclCommon.wclEInvalidArgument"> The exception raises if the <c>Client</c> or <c>Hub</c>
              parameter is <c>null</c>. </exception>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoService.Hub">
            <summary> Gets the <see cref="T:wclWeDoFramework.wclWeDoHub"/> object that owns the service. </summary>
            <value> The <see cref="T:wclWeDoFramework.wclWeDoHub"/> object. </value>
            <seealso cref="T:wclWeDoFramework.wclWeDoHub"/>
        </member>
        <member name="T:wclWeDoFramework.wclWeDoVoltageSensor">
            <summary> The class represents a WeDo Hub Voltage sensor. </summary>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoVoltageSensor.ValueChanged">
            <summary> The method called when data value has been changed. </summary>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoVoltageSensor.DoVoltageChanged">
            <summary> Fires the <c>OnVoltageChanged</c> event. </summary>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoVoltageSensor.#ctor(wclWeDoFramework.wclWeDoHub,System.Byte)">
            <summary> Creates new voltage sensor device object. </summary>
            <param name="Hub"> The Hub object that owns the device. If this parameter is <c>null</c>
              the <seealso cref="T:wclCommon.wclEInvalidArgument"/> exception raises. </param>
            <param name="ConnectionId"> The device's Connection ID. </param>
            <seealso cref="T:wclWeDoFramework.wclWeDoHub"/>
            <exception cref="T:wclCommon.wclEInvalidArgument"> The exception raises when the <c>Hub</c>
              parameter is <c>null</c>. </exception>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoVoltageSensor.Voltage">
            <summary> Gets the current battery voltage in milli volts. </summary>
            <value> The battery voltage in milli volts. </value>
        </member>
        <member name="E:wclWeDoFramework.wclWeDoVoltageSensor.OnVoltageChanged">
            <summary> The event fires when voltage has been changed. </summary>
            <seealso cref="T:System.EventHandler"/>
        </member>
        <member name="T:wclWeDoFramework.wclWeDoHubFoundEvent">
            <summary> The <c>OnHubFound</c> event handler prototype. </summary>
            <param name="Sender"> The object that fired the event. </param>
            <param name="Address"> The WeDo Hub MAC address. </param>
            <param name="Name"> The WeDo Hub name. </param>
        </member>
        <member name="T:wclWeDoFramework.wclWeDoHubLostEvent">
            <summary> The <c>OnHubLost</c> event handler prototype. </summary>
            <param name="Sender"> The object that fired the event. </param>
            <param name="Address"> The WeDo Hub MAC address. </param>
            <param name="Name"> The WeDo Hub name. </param>
        </member>
        <member name="T:wclWeDoFramework.wclWeDoHubNameChangedEvent">
            <summary> The <c>OnHunNameChanged</c> event handler prototype. </summary>
            <param name="Sender"> The object that fired the event. </param>
            <param name="Address"> The WeDo device's MAC address. </param>
            <param name="OldName"> The old name of WeDo Hub. </param>
            <param name="NewName"> The new name of WeDo Hub. </param>
        </member>
        <member name="T:wclWeDoFramework.wclWeDoWatcher">
            <summary> The class used to search WeDo devices. </summary>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoWatcher.DoHubFound(System.Int64,System.String)">
            <summary> Fires the <c>OnHubFound</c> event. </summary>
            <param name="Address"> The Hub's MAC. </param>
            <param name="Name"> The WeDo Hub name. </param>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoWatcher.DoHubLost(System.Int64,System.String)">
            <summary> Fires the <c>OnHubLost</c> event. </summary>
            <param name="Address"> The Hub's MAC. </param>
            <param name="Name"> The WeDo Hub name. </param>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoWatcher.DoHubNameChanged(System.Int64,System.String,System.String)">
            <summary> Fires the <c>OnNameChanged</c> event. </summary>
            <param name="Address"> The WeDo device's MAC address. </param>
            <param name="OldName"> The old name of WeDo Hub. </param>
            <param name="NewName"> The new name of WeDo Hub. </param>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoWatcher.DoStarted">
            <summary> Fires the <c>OnStarte</c> event. </summary>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoWatcher.DoStopped">
            <summary> Fires the <c>OnStopped</c> event. </summary>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoWatcher.#ctor">
            <summary> Creates new WeDo Watcher object. </summary>
        </member>
        <member name="M:wclWeDoFramework.wclWeDoWatcher.Start(wclBluetooth.wclBluetoothRadio)">
            <summary> Starts watching (discovering) for WeDo devices. </summary>
            <param name="Radio"> The <see cref="T:wclBluetooth.wclBluetoothRadio" /> object that should be used
              for executing Bluetooth LE discovering. </param>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="M:wclWeDoFramework.wclWeDoWatcher.Stop">
            <summary> Stops discovering WeDo devices. </summary>
            <returns> If the method completed with success the returning value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the method failed the returning value is
              one of the Bluetooth Framework error code. </returns>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoWatcher.Active">
            <summary> Gets the WeDo Hub Watcher state. </summary>
            <value> Returns <c>true</c> if Watcher is running (searching for WeDo Hubs).
              Returns <c>false</c> otherwise. </value>
        </member>
        <member name="P:wclWeDoFramework.wclWeDoWatcher.Radio">
            <summary> Gets the <see cref="T:wclBluetooth.wclBluetoothRadio"/> object that is used for searching WeDo hubs. </summary>
            <value> If Watcher is searching returns the <see cref="T:wclBluetooth.wclBluetoothRadio"/> object used for
              searching. If the Watcher is not active returns <c>nil</c>. </value>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio"/>
        </member>
        <member name="E:wclWeDoFramework.wclWeDoWatcher.OnHubFound">
            <summary> The event fires when new WeDo Hub has been found. </summary>
            <seealso cref="T:wclWeDoFramework.wclWeDoHubFoundEvent" />
        </member>
        <member name="E:wclWeDoFramework.wclWeDoWatcher.OnHubLost">
            <summary> The event fires when new WeDo Hub has been lost. </summary>
            <seealso cref="T:wclWeDoFramework.wclWeDoHubLostEvent" />
        </member>
        <member name="E:wclWeDoFramework.wclWeDoWatcher.OnHubNameChanged">
            <summary> The event fires when name of a WeDo Hub has been changed. </summary>
            <seealso cref="T:wclWeDoFramework.wclWeDoHubNameChangedEvent"/>
        </member>
        <member name="E:wclWeDoFramework.wclWeDoWatcher.OnStarted">
            <summary> The event fires when discovering has been started. </summary>
            <seealso cref="T:System.EventHandler" />
        </member>
        <member name="E:wclWeDoFramework.wclWeDoWatcher.OnStopped">
            <summary> The event fires when discovering has been stopped. </summary>
            <seealso cref="T:System.EventHandler" />
        </member>
    </members>
</doc>
